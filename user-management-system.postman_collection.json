{
	"info": {
		"_postman_id": "547bdb1a-af5f-417a-9d84-e9c15147820b",
		"name": "user-management-system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25007409"
	},
	"item": [
		{
			"name": "tests",
			"item": [
				{
					"name": "/api/ums/admin/groups",
					"item": [
						{
							"name": "E2E",
							"item": [
								{
									"name": "verifyAssignGetDeleteUsersFromAGroup",
									"item": [
										{
											"name": "Positive_CreateAGroupToAssignUsers",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036001 Validate Status Code 201 : Created after sending a POST request to generate a group to test it can be updated\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036001 Validate response body that the group was successfully generated\", function(){\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToAssignUsers",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup = (\"create a subgroup for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup\", subgroup);\r",
															"console.log(\"New testing subgroup \" + subgroup);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036002 Validate Status Code 201 : Created after sending a POST request to generate a subgroup to test it can be updated\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036002 Validate response body that the subgroup was successfully generated\", function(){\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{subgroup}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": {{testing_group_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupHierarchy_AfterAssigningSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036003 Validate Status Code : 200 OK to validate that a subgroup has been successfully assigned to a parent group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036003 Validate response body to assert parent group has a subgroup associated\", function(){\r",
															"    let resp = pm.response.json();\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.children[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(resp.children[0].name).to.equal(pm.collectionVariables.get(\"subgroup\")); \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateUserToAssignToGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036004 Validate Status Code: 201 Created when creating a user sending a valid request body\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036004 Validate Response body has correct username\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get('new_user'));\r",
															"    pm.collectionVariables.set(\"new_user_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var new_user = (\"user created for testing \" + Math.floor((Math.random() * 1000000) + 1000000));\r",
															"pm.collectionVariables.set(\"new_user\", new_user);\r",
															"console.log(\"New generated user \" + new_user);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\":0,\r\n    \"enabled\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateUserToAssignToSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036005 Validate Status Code: 201 Created when creating a user to assign to a subgroup and sending a valid request body\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036005 Validate Response body has correct username\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"       let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get('user_subgroup'));\r",
															"    pm.collectionVariables.set(\"new_user_id_subgroup\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let user_subgroup = (\"test user subgroup \" + Math.floor((Math.random() * 1000000) + 1000000));\r",
															"pm.collectionVariables.set(\"user_subgroup\", user_subgroup );\r",
															"console.log(\"New generated user subgroup \" + user_subgroup );"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{user_subgroup}}\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\":0,\r\n    \"enabled\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetAllUsersFromAGroup_BeforeAssignation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036006 Validate Status Code: 404 when I get the users from a group without assigned users\", function(){\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036006 Validate response body when retrieving all users from a group without assigned users\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"    pm.expect(jsonData.status).to.equal(404);\r",
															"    pm.expect(jsonData.message).to.equal(\"No users found for group\");\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"testing_group_id\").toString());\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetAllUsersFromASubroup_BeforeAssignation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036007 Validate Status Code: 404 when I get the users from a subgroup without assigned users\", function(){\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036007 Validate response body when retrieving all users from a subgroup without assigned users\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"    pm.expect(jsonData.status).to.equal(404);\r",
															"    pm.expect(jsonData.message).to.equal(\"No users found for group\");\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"subgroup_id\").toString());\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_AssignUserToGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036008 Status Code to be 201 Created when assigning a user to a group\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036008 Validate that a user has been assigned to a group\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.groupId).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.userId).to.equal(pm.collectionVariables.get(\"new_user_id\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"users",
														"{{new_user_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_AssignSameUserToGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2038578 Status Code to be 400 Created when assigning a user to a group\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.equal(400);\r",
															"    pm.expect(jsonData.message).to.equal(\"User Group link already exists\");\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"new_user_id\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"users",
														"{{new_user_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_AssignUserToSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036009 Status Code to be 201 Created when assigning a user to a subgroup\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036009 Validate that a user has been assigned to a subgroup\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.groupId).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.userId).to.equal(pm.collectionVariables.get(\"new_user_id_subgroup\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/users/{{new_user_id_subgroup}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"users",
														"{{new_user_id_subgroup}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_AssignSameUserToSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2038579 Status Code to be 400 Created when assigning a user to a group\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.equal(400);\r",
															"    pm.expect(jsonData.message).to.equal(\"User Group link already exists\");\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"new_user_id_subgroup\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/users/{{new_user_id_subgroup}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"users",
														"{{new_user_id_subgroup}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetAllUsersAssociatedToAGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036010 Validate Status Code: 200 OK when retrieveing a list of all users in a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2036010 Validate response body to contain the correct user Id in the group's user list\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData._embedded.umsSptUserReferenceList[0].userId).to.equal(pm.collectionVariables.get(\"new_user_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetUserBelongingToGroupsAndSubgroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036317 Validate Status Code: 200 OK when retrieveing a list of all users in a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2036317 Validate response body to contain the correct user Id in the group's user list\", function(){\r",
															"    let usersArr = pm.response.json()._embedded.umsSptUserReferenceList;\r",
															"    console.log(usersArr);\r",
															"    let actualArr =[];\r",
															"    for(let u in usersArr){\r",
															"        if(usersArr[u].userId === pm.collectionVariables.get(\"new_user_id\")){\r",
															"            actualArr.push(usersArr[u].userId);\r",
															"        }else if (usersArr[u].userId === pm.collectionVariables.get(\"new_user_id_subgroup\")){\r",
															"            actualArr.push(usersArr[u].userId)\r",
															"        }\r",
															"    }\r",
															"    pm.expect(actualArr.length).to.equal(2);\r",
															"    pm.expect(actualArr).to.contain(pm.collectionVariables.get(\"new_user_id\"));\r",
															"    pm.expect(actualArr).to.contain(pm.collectionVariables.get(\"new_user_id_subgroup\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetUsersAssociatedToASubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036011 Validate Status Code: 200 OK when retrieveing a list of all users in a subgroup\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2036011 Validate response body to contain the correct user Id in the subgroup's list\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData._embedded.umsSptUserReferenceList[0].userId).to.equal(pm.collectionVariables.get(\"new_user_id_subgroup\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupsAssociatedToAUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036012 Validate Status Code: 200 OK when retrieveing a list of all users in a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2036012 Validate response body to contain the correct user Id in the group's user list\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_id}}",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetSubroupsAssociatedToAUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036013 Validate Status Code: 200 OK when retrieveing a list of all users in a subgroup\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2036013 Validate response body to contain the correct user Id in the subgroup's user list\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id_subgroup}}/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_id_subgroup}}",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteUserFromGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036014 Validate Status Code: 202 when submitting a valid DELETE Request to remove a user from a group\", function(){\r",
															"    pm.response.to.have.status(202);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036014 Validate response body after successfully removing a user from a group\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Accepted\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"users",
														"{{new_user_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_DeleteUnasociatedUserFromGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036015 Validate Status Code: 204 when submitting a valid DELETE Request to remove a user from a group\", function(){\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036015 Validate response body after successfully removing a user from a group\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"users",
														"{{new_user_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetUsersAssociatedToAGroup_AfterDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036016 Validate Status Code: 404 Not Found when retrieveing a list of all users in a group\", function(){\r",
															"    pm.response.to.have.status(404);\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2036016 Validate response body to contain the correct user Id in the group's user list\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.equal(\"No users found for group\");\r",
															"    pm.expect(jsonData.status).to.equal(404);\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"testing_group_id\").toString());\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetGroupsAssociatedToAnInexistentUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036017 Validate Status Code: 200 OK when retrieveing a list of all groups in a removed user\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2036017 Validate response body when retrieveing a list of all groups in a removed user\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_id}}",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteSubgroupWithAssociatedUsers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036000 Validate Status Code: 204 No Content when submitting a valid DELETE Request to remove a user from a group\", function(){\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036000 Validate response body after successfully removing a user from a group\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupHierarchy_AfterDeletingSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036018 Validate Status Code : 200 OK to validate that a subgroup has been successfully removed from a parent group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036018 Validate response body to assert parent group does not have a subgroup associated after deleting it\", function(){\r",
															"    let resp = pm.response.json();\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "validateDuplicatedGroupandDeleteGroup",
									"item": [
										{
											"name": "CreateAGroupForDeletion",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var new_group_delete = (\"test group to delete \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"new_group_delete\", new_group_delete);\r",
															"console.log(\"New generated group for testing deletion \" + new_group_delete);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData= pm.response.json();\r",
															"\r",
															"pm.test(\"C735631 Validate Status Code to be 201 Created when creating a new group for deletion\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735631 Validate response body has expected name after creating a new group for deletion\", function(){\r",
															"   pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"new_group_delete\"));\r",
															"   pm.collectionVariables.set(\"new_group_delete_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{new_group_delete}}\",\r\n    \"description\" : \"This group is created to test deletion\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupCreatedGroupBeforeDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735632 Validate Status Code: 200 when sending a GET request to a created group for deletion testing\", function() {\r",
															"    pm.response.to.have.status(200); \r",
															"});\r",
															"\r",
															"pm.test(\"C735632 Validate response body when sending a GET request to a created group for deletion testing\", function (){\r",
															"    pm.expect(resp).to.have.own.property(\"id\");\r",
															"    pm.expect(resp.id).to.be.equal(pm.collectionVariables.get(\"new_group_delete_id\"))\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{new_group_delete_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{new_group_delete_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_CreateGroupDuplicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735633 Validate Status Code: 400 Bad Request when sending a POST a duplicated group name\", function() {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735633 Validate response body when sending a POST a duplicated group name\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{new_group_delete}}\",\r\n    \"description\" : \"This group is created to test invalid duplication\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupCreatedGroupBeforeDeletionAfterDuplication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735634 Validate Status Code: 200 when sending a GET request to a created group for deletion testing\", function() {\r",
															"    pm.response.to.have.status(200); \r",
															"});\r",
															"\r",
															"pm.test(\"C735634 Validate response body when sending a GET request to a created group for deletion testing after trying to duplicate it\", function (){\r",
															"    let responseArr =  pm.response.json();\r",
															"    let namesArrTests=[];\r",
															"    for (var n in responseArr){\r",
															"        if(responseArr[n].name === (pm.collectionVariables.get(\"new_group_delete\"))){\r",
															"            namesArrTests.push(responseArr[n].name);\r",
															"        }\r",
															"    }\r",
															"    pm.expect(namesArrTests).to.have.length(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteCreatedGroupForDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735635 Validate Status Code: 400 Bad Request when sending a DELETE request to a parent without subgroups\", function() {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735635 Validate response body has no content  when sending a DELETE request to a parent without subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    pm.expect(pm.response.json().message).to.equal(\"Group can't be deleted\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{new_group_delete_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{new_group_delete_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetGroupAfterDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"[UMS-133] C735636 Validate Status Code is 404 when searching for a deleted group created for deletion\", function(){\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-133] C735636 Validate that response is Not Found when searching for a deleted group created for deletion\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{new_group_delete_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{new_group_delete_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetGroupHierarchyAfterDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"[UMS-133] C735637 Validate Status Code: 404 when searching for a deleted group hierarchy created for deletion\", function() {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-133] C735637 Validate Status Code is Not Found searching for a deleted group created for deletion\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{new_group_delete_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{new_group_delete_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetGroupHierarchyIdsAfterDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"[UMS-133] C735638 Validate Status Code: 404 when searching for a deleted group hierarchy created for deletion\", function() {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-133] C735638 Validate Status Code is Not Found searching for a deleted group created for deletion\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{new_group_delete_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{new_group_delete_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "validateChangeNameOfGroupAndMoveGroup",
									"item": [
										{
											"name": "Positive_CreateAParentGroupA",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735649 Validate Status Code 201 : Created after sending a POST request to generate a parent group A to test it can be updated\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateAParentGroupB",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var parent_group = (\"create a group B for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"parent_group\", parent_group);\r",
															"console.log(\"New parent group B \" + parent_group);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036898 Validate Status Code 201 : Created after sending a POST request to generate a parent group B to test it can be moved\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"parent_group\"));\r",
															"    pm.collectionVariables.set(\"parent_group_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{parent_group}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupA",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup = (\"create a subgroup for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup\", subgroup);\r",
															"console.log(\"New testing subgroup \" + subgroup);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036899 Validate Status Code 201 : Created after sending a POST request to generate a subgroup A to test it can be updated\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{subgroup}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": \"{{testing_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupB",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup2 = (\"create a subgroup B for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup2\", subgroup2);\r",
															"console.log(\"New testing subgroup \" + subgroup2);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036900 Validate Status Code 201 : Created after sending a POST request to generate a subgroup B to test it can be moved\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup2\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"parent_group\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id2\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{subgroup2}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": \"{{parent_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupBLevel2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup3 = (\"create a subgroup B level 2 for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup3\", subgroup3);\r",
															"console.log(\"New testing subgroup3 on level 2 \" + subgroup3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036901 Validate Status Code 201 : Created after sending a POST request to generate a subgroup B on level 2 to test it can be moved\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup3\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"parent_group\") + \"/\" + pm.collectionVariables.get(\"subgroup2\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id3\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{subgroup3}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": \"{{subgroup_id2}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let firstChild = pm.response.json();\r",
															"var firstArr= [];\r",
															"var secondArr=[];\r",
															"\r",
															"pm.test(\"C2036903 Validate Status Code: 200 when sending a GET request to validate that subgroup A has been adequately assigned to parent group A and receiving only Id's\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036904 Validate response body when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    for(let f in firstChild){\r",
															"        if(firstChild.hasOwnProperty(\"children\")){\r",
															"            firstArr.push(firstChild.id);\r",
															"            let secondChild = pm.response.json().children;\r",
															"            console.log(secondChild)\r",
															"            for(let s in secondChild){\r",
															"                if (secondChild.length >= 1){\r",
															"                    secondArr.push(secondChild[0].id);\r",
															"                }\r",
															"            }\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"    pm.expect(firstArr.length).to.equal(1);\r",
															"    pm.expect(firstArr).to.contain(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(secondArr.length).to.equal(1);\r",
															"    console.log(secondArr);\r",
															"    pm.expect(secondArr).to.contain(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentB_BeforeMovements",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let firstChild = pm.response.json();\r",
															"var firstArr= [];\r",
															"var secondArr=[];\r",
															"var thirdArr = [];\r",
															"\r",
															"pm.test(\"C2036905 Validate Status Code: 200 when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036906 Validate response body when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function(){\r",
															"  pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    for(let f in firstChild){\r",
															"        if(firstChild.hasOwnProperty(\"children\")){\r",
															"            firstArr.push(firstChild.id);\r",
															"            let secondChild = pm.response.json().children[0];\r",
															"            for(let s in secondChild){\r",
															"                if(secondChild.hasOwnProperty(\"children\")){\r",
															"                    secondArr.push(secondChild.id);\r",
															"                    let thirdChild = secondChild.children;                    \r",
															"                    for(let s in thirdChild){\r",
															"                        console.log(thirdChild);   \r",
															"                        if (thirdChild.length >= 1){\r",
															"                            thirdArr.push(thirdChild[0].id);\r",
															"                        }\r",
															"                    }\r",
															"                }break;\r",
															"            }\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"    pm.expect(firstArr.length).to.equal(1);\r",
															"    pm.expect(firstArr).to.contain(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(secondArr.length).to.equal(1);\r",
															"    pm.expect(secondArr).to.contain(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    pm.expect(thirdArr.length).to.equal(1);\r",
															"    pm.expect(thirdArr).to.contain(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyParentGroupB_BeforeMovements",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children;\r",
															"let childrenArr = [];\r",
															"\r",
															"pm.test(\"C2036907 Validate Status Code: 200 when sending a GET request using an ID with hierarchy '2'\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036908 Validate response body has expected id after updating the name of a group in the hierarchy\", function(){\r",
															"pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    for(let c in childrenData){\r",
															"        if(childrenData[c].id === pm.collectionVariables.get(\"subgroup_id2\")){\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"            pm.expect(childrenData[c].path).to.equal(\"/\"+ pm.collectionVariables.get(\"parent_group\"));\r",
															"            childrenArr.push(childrenData[c].id);\r",
															"            let secondChild = childrenData[c].children;\r",
															"            for (let s in secondChild){\r",
															"                if(secondChild[s].id === pm.collectionVariables.get(\"subgroup_id3\")){\r",
															"                pm.expect(secondChild[s].id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"                pm.expect(secondChild[s].path).to.equal(\"/\"+ pm.collectionVariables.get(\"parent_group\")+\"/\"+ pm.collectionVariables.get(\"subgroup2\"));\r",
															"                childrenArr.push(secondChild[s].id);\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"    pm.expect(childrenArr.length).to.equal(2);\r",
															"    pm.expect(childrenArr).to.contain(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    pm.expect(childrenArr).to.contain(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_ChangeNameParentGroupA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735648  Validate Status Code 200 OK when changing the name of a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036902 Validate response body name and id when changing the name of a group\", function(){\r",
															"    pm.expect(jsonData.id).equals(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"parentGroup_rename\"));\r",
															"    pm.expect(pm.collectionVariables.get(\"parentGroup_rename\")).to.not.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var parentGroup_rename = (\"Rename a parent group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"parentGroup_rename\", parentGroup_rename);\r",
															"console.log(\"Rename a parent group \" + parentGroup_rename);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\":\"{{parentGroup_rename}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"rename"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_ChangeNameSubgroupA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036909 Validate Status Code 200 OK when changing the name of a subgroup\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036910 Validate response body name and id when changing the name of a subgroup\", function(){\r",
															"    pm.expect(jsonData.id).equals(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup_rename\"));\r",
															"    pm.expect(pm.collectionVariables.get(\"subgroup_rename\")).to.not.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\"+ pm.collectionVariables.get(\"parentGroup_rename\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup_rename = (\"Rename a subgroup \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup_rename\", subgroup_rename);\r",
															"console.log(\"Rename a subgroup \" + subgroup_rename);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\":\"{{subgroup_rename}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/rename",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"rename"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupA_AfterUpdateName",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735650 Validate Status code 200 OK when verifying the changes on the name after updating it\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036912 Validate response body has expected id after updating the name of a group\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"parentGroup_rename\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetSubgroupA_AfterUpdateName",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2036911 Validate Status code 200 OK when verifying the changes on the name after updating it\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036913 Validate response body has expected id after updating the name of a group\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup_rename\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\"+ pm.collectionVariables.get(\"parentGroup_rename\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyParentGroupA_AfterUpdatingName",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children[0];\r",
															"\r",
															"pm.test(\"C2036914 Validate Status Code: 200 when sending a GET request to validate that the group names have been successfully updated on hierarchy\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036915 Validate response body has expected id after updating the name of a group in the hierarchy\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"parentGroup_rename\"));\r",
															"    pm.expect(childrenData.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(childrenData.name).to.equal(pm.collectionVariables.get(\"subgroup_rename\"))\r",
															"    pm.expect(childrenData.path).to.equal(\"/\"+ pm.collectionVariables.get(\"parentGroup_rename\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_MoveGroup_MoveSubgroupBLevel2ToLevel1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036916 Validate Status Code 200 OK when I move a subgroup B on level 2 to level 1 within the same organization\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\"+ pm.collectionVariables.get(\"parent_group\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id3}}/move?parentID={{parent_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id3}}",
														"move"
													],
													"query": [
														{
															"key": "parentID",
															"value": "{{parent_group_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentB_AfterMovingSubgroupToLevel1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let firstChild = pm.response.json();\r",
															"var firstArr= [];\r",
															"var secondArr=[];\r",
															"\r",
															"pm.test(\"C2036917 Validate Status Code: 200 when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036918 Validate response body when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function(){\r",
															"  pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    for(let f in firstChild){\r",
															"        if(firstChild.hasOwnProperty(\"children\")){\r",
															"            firstArr.push(firstChild.id);\r",
															"            let secondChild = pm.response.json().children;\r",
															"            for(let s in secondChild){\r",
															"                if(secondChild[s].id== pm.collectionVariables.get(\"subgroup_id3\")){\r",
															"                    secondArr.push(secondChild[s].id);\r",
															"                }else if (secondChild[s].id == pm.collectionVariables.get(\"subgroup_id2\")){\r",
															"                    secondArr.push(secondChild[s].id)\r",
															"                }\r",
															"            }\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"    pm.expect(firstArr.length).to.equal(1);\r",
															"    pm.expect(firstArr).to.contain(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(secondArr.length).to.equal(2);\r",
															"    pm.expect(secondArr).to.contain(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyParentGroupB_AfteMovingSubgroupBLevel2toLevel1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children;\r",
															"let childrenArr = [];\r",
															"\r",
															"pm.test(\"C2036919 Validate Status Code: 200 when sending a GET request using an ID with hierarchy '2'\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036920 Validate response body has expected id after updating the name of a group in the hierarchy\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    for(let c in childrenData){\r",
															"        if(childrenData[c].id === pm.collectionVariables.get(\"subgroup_id2\")){\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"            pm.expect(childrenData[c].path).to.equal(\"/\"+ pm.collectionVariables.get(\"parent_group\"));\r",
															"            childrenArr.push(childrenData[c].id);\r",
															"        }else if(childrenData[c].id === pm.collectionVariables.get(\"subgroup_id3\")){\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"            pm.expect(childrenData[c].path).to.equal(\"/\"+ pm.collectionVariables.get(\"parent_group\"));\r",
															"            childrenArr.push(childrenData[c].id);\r",
															"        }\r",
															"    }\r",
															"    pm.expect(childrenArr.length).to.equal(2);\r",
															"    pm.expect(childrenArr).to.contain(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    pm.expect(childrenArr).to.contain(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_MoveGroup_MoveAgainSubgroupBLevel2ToLevel1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036941 Validate Status Code 200 OK when I move a subgroup B on level 2 to level 1 within the same organization\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"parent_group\") + \"/\"+ pm.collectionVariables.get(\"subgroup2\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id3}}/move?parentID={{subgroup_id2}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id3}}",
														"move"
													],
													"query": [
														{
															"key": "parentID",
															"value": "{{subgroup_id2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentB_AfterReordering",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let firstChild = pm.response.json();\r",
															"var firstArr= [];\r",
															"var secondArr=[];\r",
															"var thirdArr = [];\r",
															"\r",
															"pm.test(\"C2036942 Validate Status Code: 200 when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036943 Validate response body when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function(){\r",
															"  pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    for(let f in firstChild){\r",
															"        if(firstChild.hasOwnProperty(\"children\")){\r",
															"            firstArr.push(firstChild.id);\r",
															"            let secondChild = pm.response.json().children[0];\r",
															"            for(let s in secondChild){\r",
															"                if(secondChild.hasOwnProperty(\"children\")){\r",
															"                    secondArr.push(secondChild.id);\r",
															"                    let thirdChild = secondChild.children;                    \r",
															"                    for(let s in thirdChild){\r",
															"                        console.log(thirdChild);   \r",
															"                        if (thirdChild.length >= 1){\r",
															"                            thirdArr.push(thirdChild[0].id);\r",
															"                        }\r",
															"                    }\r",
															"                }break;\r",
															"            }\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"    pm.expect(firstArr.length).to.equal(1);\r",
															"    pm.expect(firstArr).to.contain(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(secondArr.length).to.equal(1);\r",
															"    pm.expect(secondArr).to.contain(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    pm.expect(thirdArr.length).to.equal(1);\r",
															"    pm.expect(thirdArr).to.contain(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyParentGroupB_AfterReordering",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children;\r",
															"let childrenArr = [];\r",
															"\r",
															"pm.test(\"C2036944 Validate Status Code: 200 when sending a GET request using an ID with hierarchy '2'\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2036945 Validate response body has expected id after updating the name of a group in the hierarchy\", function(){\r",
															"pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    for(let c in childrenData){\r",
															"        if(childrenData[c].id === pm.collectionVariables.get(\"subgroup_id2\")){\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"            pm.expect(childrenData[c].path).to.equal(\"/\"+ pm.collectionVariables.get(\"parent_group\"));\r",
															"            childrenArr.push(childrenData[c].id);\r",
															"            let secondChild = childrenData[c].children;\r",
															"            for (let s in secondChild){\r",
															"                if(secondChild[s].id === pm.collectionVariables.get(\"subgroup_id3\")){\r",
															"                pm.expect(secondChild[s].id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"                pm.expect(secondChild[s].path).to.equal(\"/\"+ pm.collectionVariables.get(\"parent_group\")+\"/\"+ pm.collectionVariables.get(\"subgroup2\"));\r",
															"                childrenArr.push(secondChild[s].id);\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"    pm.expect(childrenArr.length).to.equal(2);\r",
															"    pm.expect(childrenArr).to.contain(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    pm.expect(childrenArr).to.contain(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_MoveSubgroupToDifferentOrg",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036946 Validate Status Code 400 Bad Request when I move a subgroup B as child of parent group from organization A\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.equal(\"Parent is from a different Organization\");\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id3}}/move?parentID={{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id3}}",
														"move"
													],
													"query": [
														{
															"key": "parentID",
															"value": "{{testing_group_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_MoveParentGroup_MoveOrg",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036947 Validate Status Code 400 Bad Request when I move a Parent group to be child of its own Subgroup\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.equal(\"You can't move Organizations\");\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/move?parentID={{subgroup_id2}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"move"
													],
													"query": [
														{
															"key": "parentID",
															"value": "{{subgroup_id2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_AssignSubgroupAsParentofParentGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2036948 Validate Status Code 400 Bad Request when I move a Parent group to be child of its own Subgroup\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.equal(\"New parent is a subgroup\");\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id2}}/move?parentID={{subgroup_id3}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id2}}",
														"move"
													],
													"query": [
														{
															"key": "parentID",
															"value": "{{subgroup_id3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_AssignSubgroupAsItsOwnParent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"[UMS-188] C2036949 Validate Status Code 400 Bad Request when I move a Parent group to be child of a Subgroup\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.equal(\"Invalid parent ID\");\r",
															"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"subgroup_id2\"))\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id2}}/move?parentID={{subgroup_id2}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id2}}",
														"move"
													],
													"query": [
														{
															"key": "parentID",
															"value": "{{subgroup_id2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Validate that a user can change the name of a group\n\n- Currently 1 Bug UMS-23"
								},
								{
									"name": "validateMoveSimilarSubgroups",
									"item": [
										{
											"name": "Positive_CreateOrgA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2037736 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body for testing moving subgroups with similar names\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037736 Validate response body when sending a POST request with a valid JSON request Body for testing moving subgroups with similar names\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.expect(jsonData.metadata).to.be.empty;\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037736 Validate that metadata attribute is empty\", function(){\r",
															"    pm.expect(jsonData.metadata).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"orgA\" + Math.floor((Math.random() * 100000)));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"Test Move subgroups similar name\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroupA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2037738 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C203778 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(resp.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"subgroupA_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroupA = (\"subgroupA1\" + Math.floor((Math.random() * 100000) +10 ));\r",
															"pm.collectionVariables.set(\"subgroupA\", subgroupA);\r",
															"console.log(\"New subgroupA\" + subgroupA);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroupA}}\",\r\n    \"description\": \"Group created to be a subgroup\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{testing_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroupA12_Level2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2037739 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037739 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(resp.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\")+ \"/\" + pm.collectionVariables.get(\"subgroupA\"));\r",
															"    pm.collectionVariables.set(\"subgroupA12_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroupA12 = (\"subgroupA12\" + Math.floor((Math.random() * 10) +100));\r",
															"pm.collectionVariables.set(\"subgroupA12\", subgroupA12);\r",
															"console.log(\"New subgroupA2\" + subgroupA12);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroupA12}}\",\r\n    \"description\": \"Group created to be a subgroup\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{subgroupA_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroupA11_Similar",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2037740 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037740 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.collectionVariables.set(\"subgroupA11_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroupA11 = (\"subgroupA11\" + Math.floor((Math.random() * 1000000) + 100));\r",
															"pm.collectionVariables.set(\"subgroupA11\", subgroupA11);\r",
															"console.log(\"New subgroupA11\" + subgroupA11);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroupA11}}\",\r\n    \"description\": \"Group created to be a subgroup\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{testing_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroupA1111Level2_Similar",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2037741 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037741 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.collectionVariables.set(\"subgroupA1111_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroupA1111 = (\"subgroupA1111\" + Math.floor((Math.random() * 100000)+100));\r",
															"pm.collectionVariables.set(\"subgroupA1111\", subgroupA1111);\r",
															"console.log(\"New subgroupA1111\" + subgroupA1111);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroupA1111}}\",\r\n    \"description\": \"Group created to be a subgroup\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{subgroupA11_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHirarchyOrgA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children;\r",
															"let firstChildrenArr = [];\r",
															"let secondChildrenArr =[];\r",
															"\r",
															"pm.test(\"C2037742 Validate Status Code: 200 OK when I search for the Organization's hierarchy\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037743 Validate Hierarchy body from the organization to contain all groups in the corresponding hierarchy\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.expect(jsonData.children).to.have.lengthOf(2);\r",
															"    for(let c in childrenData){\r",
															"        switch(childrenData[c].id){\r",
															"            case pm.collectionVariables.get(\"subgroupA_id\"): {\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"            firstChildrenArr.push(childrenData[c].id);\r",
															"            if(childrenData[c].children.length > 0){\r",
															"                let secondChildren = childrenData[c].children;\r",
															"                for(let s in secondChildren){\r",
															"                    if(childrenData[c].children[s].id === pm.collectionVariables.get(\"subgroupA12_id\")){\r",
															"                        pm.expect(childrenData[c].children[s].id).to.equal(pm.collectionVariables.get(\"subgroupA12_id\"));\r",
															"                        secondChildrenArr.push(childrenData[c].children[s].id);\r",
															"                    }\r",
															"                }\r",
															"            }\r",
															"            break;\r",
															"            }\r",
															"            case pm.collectionVariables.get(\"subgroupA11_id\"): {\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroupA11_id\"));\r",
															"            firstChildrenArr.push(childrenData[c].id);\r",
															"            if(childrenData[c].children.length > 0){\r",
															"                let secondChildren = childrenData[c].children;\r",
															"                for(let s in secondChildren){\r",
															"                    if(childrenData[c].children[s].id === pm.collectionVariables.get(\"subgroupA1111_id\")){\r",
															"                        pm.expect(childrenData[c].children[s].id).to.equal(pm.collectionVariables.get(\"subgroupA1111_id\"));\r",
															"                        secondChildrenArr.push(childrenData[c].children[s].id);\r",
															"                    }\r",
															"                }\r",
															"            }\r",
															"            break;\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"    pm.expect(firstChildrenArr.length).to.equal(2);\r",
															"    pm.expect(firstChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"    pm.expect(firstChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA11_id\"));\r",
															"    pm.expect(secondChildrenArr.length).to.equal(2);\r",
															"    pm.expect(secondChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA12_id\"));\r",
															"    pm.expect(secondChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA1111_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_MoveSubgroupAToA11Similar",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2037744 Validate Status Code 200 OK when moving a subgroup to a different child from the org but on the same level\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037745 Validate response body when I want to move the subgroup from the same org to another subgroup in the same level\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroupA\"));\r",
															"    pm.expect(jsonData.path).to.equal(\"/\"+ pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroupA11\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroupA_id}}/move?parentID={{subgroupA11_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroupA_id}}",
														"move"
													],
													"query": [
														{
															"key": "parentID",
															"value": "{{subgroupA11_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHirarchyOrgA_AfterMovingSubgroupA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children;\r",
															"let firstChildrenArr = [];\r",
															"\r",
															"pm.test(\"C2037746 Validate Status Code: 200 OK when I search for the Organization's hierarchy\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2037747 Validate Hierarchy body from the organization to contain all groups in the corresponding hierarchy\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.expect(jsonData.children[0].id).to.equal(pm.collectionVariables.get(\"subgroupA11_id\"));\r",
															"    pm.expect(jsonData.children[0].name).to.equal(pm.collectionVariables.get(\"subgroupA11\"));\r",
															"    pm.expect(jsonData.children[0].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"\r",
															"    pm.expect(jsonData.children[0].children[0].id).to.equal(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"    pm.expect(jsonData.children[0].children[0].name).to.equal(pm.collectionVariables.get(\"subgroupA\"));\r",
															"    pm.expect(jsonData.children[0].children[0].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroupA11\"));\r",
															"    pm.expect(jsonData.children[0].children[0].children[0].id).to.equal(pm.collectionVariables.get(\"subgroupA12_id\"));\r",
															"    pm.expect(jsonData.children[0].children[0].children[0].name).to.equal(pm.collectionVariables.get(\"subgroupA12\"));\r",
															"    pm.expect(jsonData.children[0].children[0].children[0].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroupA11\") +\"/\" + pm.collectionVariables.get(\"subgroupA\"));\r",
															"\r",
															"    pm.expect(jsonData.children[0].children[1].id).to.equal(pm.collectionVariables.get(\"subgroupA1111_id\"));\r",
															"    pm.expect(jsonData.children[0].children[1].name).to.equal(pm.collectionVariables.get(\"subgroupA1111\"));\r",
															"    pm.expect(jsonData.children[0].children[1].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroupA11\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateOrgB",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037748 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body for testing moving subgroups with similar names\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037748 Validate response body when sending a POST request with a valid JSON request Body for testing moving subgroups with similar names\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_groupB\"));\r",
															"    pm.expect(jsonData.metadata).to.be.empty;\r",
															"    pm.collectionVariables.set(\"testing_groupB_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_groupB = (\"orgB\" + Math.floor((Math.random() * 100000)));\r",
															"pm.collectionVariables.set(\"testing_groupB\", testing_groupB);\r",
															"console.log(\"New testing group B \" + testing_groupB);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_groupB}}\",\r\n    \"description\" : \"Test Move subgroups similar name to cause loop\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroupB",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037749 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037749 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.collectionVariables.set(\"subgroupB_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroupB = (\"subgroupB1\" + Math.floor((Math.random() * 100000) +10 ));\r",
															"pm.collectionVariables.set(\"subgroupB\", subgroupB);\r",
															"console.log(\"New subgroupB\" + subgroupB);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroupB}}\",\r\n    \"description\": \"Group created to be a subgroup\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{testing_groupB_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroupB_Level2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037750 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037750 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.collectionVariables.set(\"subgroupA12_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{testing_groupB}}\",\r\n    \"description\": \"Group created to be a subgroup\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{subgroupB_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHirarchyOrgB",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"(UMS-216] C2037751 Validate Status Code: 200 OK when I search for the Organization's hierarchy\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037751 Validate Hierarchy body from the organization to contain all groups in the corresponding hierarchy\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children;\r",
															"let firstChildrenArr = [];\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.expect(jsonData.children).to.have.lengthOf(2);\r",
															"    for(let c in childrenData){\r",
															"        switch(childrenData[c].id){\r",
															"            case pm.collectionVariables.get(\"subgroupA_id\"): {\r",
															"            console.log(\"First case \" + childrenData[c].id);\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"            firstChildrenArr.push(childrenData[c].id);\r",
															"            break;\r",
															"            }\r",
															"            case pm.collectionVariables.get(\"subgroupA11_id\"): {\r",
															"            console.log(\"Second case \" + childrenData[c].id);\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroupA11_id\"));\r",
															"            firstChildrenArr.push(childrenData[c].id);\r",
															"            break;\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"    pm.expect(firstChildrenArr.length).to.equal(2);\r",
															"    pm.expect(firstChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"    pm.expect(firstChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA11_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_groupB_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_groupB_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHirarchyOrgB Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"(UMS-216] C2037751 Validate Status Code: 200 OK when I search for the Organization's hierarchy\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"(UMS-216] C2037751 Validate Hierarchy body from the organization to contain all groups in the corresponding hierarchy\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"let childrenData = pm.response.json().children;\r",
															"let firstChildrenArr = [];\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.expect(jsonData.children).to.have.lengthOf(2);\r",
															"    for(let c in childrenData){\r",
															"        switch(childrenData[c].id){\r",
															"            case pm.collectionVariables.get(\"subgroupA_id\"): {\r",
															"            console.log(\"First case \" + childrenData[c].id);\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"            firstChildrenArr.push(childrenData[c].id);\r",
															"            break;\r",
															"            }\r",
															"            case pm.collectionVariables.get(\"subgroupA11_id\"): {\r",
															"            console.log(\"Second case \" + childrenData[c].id);\r",
															"            pm.expect(childrenData[c].id).to.equal(pm.collectionVariables.get(\"subgroupA11_id\"));\r",
															"            firstChildrenArr.push(childrenData[c].id);\r",
															"            break;\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"    pm.expect(firstChildrenArr.length).to.equal(2);\r",
															"    pm.expect(firstChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA_id\"));\r",
															"    pm.expect(firstChildrenArr).to.contain(pm.collectionVariables.get(\"subgroupA11_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/3675/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"3675",
														"hierarchy"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "validatePaths",
									"item": [
										{
											"name": "Positive_CreateGroupLevel1_TestPaths",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData=pm.response.json();\r",
															"\r",
															"pm.test(\"C735652 Validate Status Code 201 Created when creating a new group to test path\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735652 Validate response body after creating a new group to test path\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"This group is created to test created group has a path\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupLevel1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735653 Validate Status Code: 200 when sending a GET request to a parent group on the highest level\", function() {\r",
															"    pm.response.to.have.status(200); \r",
															"});\r",
															"\r",
															"pm.test(\"C735653 Validate response body when sending a valid GET request to a parent group on the highest level\", function (){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData).to.not.have.property(\"path\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735654 Validate Status Code: 200 when sending a GET request to retrieve hierarchy of a parent group on the highest level\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735654 Validate response body when sending a GET request to retrieve hierarchy of a parent group on the highest level\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"    pm.expect(resp).to.not.have.property(\"path\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateGroupLevel2_TestPaths",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup = (\"create a subgroup for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup\", subgroup);\r",
															"console.log(\"New testing subgroup \" + subgroup);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData=pm.response.json();\r",
															"\r",
															"pm.test(\"C735655 Validate Status Code 201 Created when creating a new group to test path\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"});\r",
															"\r",
															"pm.test(\"C735655 Validate response body after creating a new subgroup on the second highest level and verify parent is correct\", function(){\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id\",jsonData.id);\r",
															"    pm.collectionVariables.set(\"subgroup_path\", jsonData.path);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{subgroup}}\",\r\n    \"description\" : \"This group is created to test created subgroup has a path\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": {{testing_group_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupLevel2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735656 Validate Status Code: 200 when sending a GET request to get the subgroup on the second highest level\", function() {\r",
															"    pm.response.to.have.status(200); \r",
															"});\r",
															"\r",
															"pm.test(\"C735656 Validate response body when sending a valid GET request to get the subgroup on the second highest level\", function (){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.path).to.equal(pm.collectionVariables.get(\"subgroup_path\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C735656 Validate response body when sending a valid GET request to retrieve the correct path on the group from the second highest level\", function(){\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735657 Validate Status Code: 200 when sending a GET request to get the hierarchy of the subgroup on the second highest level\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735657 Validate response body when sending a GET request to get the inexisting children of the subgroup on the second highest level\", function() {\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.children).to.be.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"C735657 Validate request body when sending a Get request to get the path of this second highest level subgroup\", function(){\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.expect(jsonData.path).to.equal(pm.collectionVariables.get(\"subgroup_path\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel1_AfterAssiginingLevel2Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735658 Validate Status Code: 200 when sending a GET of the parent group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735658 Validate response body when sending a GET of the parent group and validate children is second level subgroup\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    let actualChildrenArr = pm.response.json().children;\r",
															"    let subgroupCount = [];\r",
															"    for(a in actualChildrenArr){\r",
															"        if(resp.children[a].name == pm.collectionVariables.get(\"subgroup\")){\r",
															"        pm.expect(resp.children[a].name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"        pm.expect(resp.children[a].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"        subgroupCount.push(resp.children[a]);\r",
															"        }\r",
															"    }\r",
															"    pm.expect(subgroupCount).to.have.lengthOf(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateGroupLevel3_TestPaths",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup2 = (\"create a second level subgroup for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup2\", subgroup2);\r",
															"console.log(\"New testing subgroup2 \" + subgroup2);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData=pm.response.json();\r",
															"\r",
															"pm.test(\"C735659 Validate Status Code 201 Created when creating a new group to test path\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735659 Validate response body after creating a new group to test path\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup2\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id2\",jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{subgroup2}}\",\r\n    \"description\" : \"This group is created to test created subgroup3 has a path\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": {{subgroup_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupLevel3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735660 Validate Status Code: 200 when sending a GET request to a subgroup on the second third level\", function() {\r",
															"    pm.response.to.have.status(200); \r",
															"});\r",
															"\r",
															"pm.test(\"C735660 Validate response body when sending a valid GET request to a subgroup on the third highest level\", function (){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"});\r",
															"\r",
															"pm.test(\"Validate request body when sending a Get request to get the path of this third highest level subgroup\", function(){\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.collectionVariables.set(\"subgroup2_path\", jsonData.path);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id2}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735661 Validate Status Code: 200 when sending a GET request to get the hierarchy of the subgroup on the third highest level\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735661 Validate response body when sending a GET request to get the inexisting path of the subgroup on the third highest level\", function() {\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    pm.expect(jsonData.children).to.be.empty;\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id2}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id2}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel1_AfterAssiginingLevel3Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735663 Validate Status Code: 200 when sending a GET of the parent group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735663 Validate response body when sending a GET request to the parent group and validate children is second level subgroup\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    let actualChildrenArr = pm.response.json().children;\r",
															"    let subgroupCount = [];\r",
															"    for(a in actualChildrenArr){\r",
															"        if(resp.children[a].name == pm.collectionVariables.get(\"subgroup\")){\r",
															"        pm.expect(resp.children[a].name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"        pm.expect(resp.children[a].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"        subgroupCount.push(resp.children[a]);\r",
															"        let actualChildrenArr2 = pm.response.json().children[a].children;\r",
															"            for(b in actualChildrenArr2){\r",
															"                if(resp.children[a].children[b].name == pm.collectionVariables.get(\"subgroup2\")){\r",
															"                    pm.expect(resp.children[a].children[b].name).to.equal(pm.collectionVariables.get(\"subgroup2\"));\r",
															"                    pm.expect(resp.children[a].children[b].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\"));\r",
															"                    subgroupCount.push(resp.children[a].children[b]);\r",
															"                }\r",
															"            }\r",
															"        } \r",
															"    }\r",
															"    pm.expect(subgroupCount).to.have.lengthOf(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel2_AfterAssiginingLevel3Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735662 Validate Status Code: 200 when sending a GET of the parent group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735662 Validate response body when sending a GET of the parent group and validate children is second level subgroup\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    let actualChildrenArr = pm.response.json().children;\r",
															"    let subgroupCount = [];\r",
															"    for(a in actualChildrenArr){\r",
															"        if(resp.children[a].name == pm.collectionVariables.get(\"subgroup2\")){\r",
															"        pm.expect(resp.children[a].name).to.equal(pm.collectionVariables.get(\"subgroup2\"));\r",
															"        pm.expect(resp.children[a].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\"));\r",
															"        subgroupCount.push(resp.children[a]);\r",
															"        }\r",
															"    }\r",
															"    pm.expect(subgroupCount).to.have.lengthOf(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateGroupLevel4_TestPaths",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup3 = (\"Create a fourth level subgroup for testing with a very long name to test it cannot be this long (more than 255 characters) for a group's path ......................... \" + Math.floor((Math.random() * 100000000000000) + 10000000000000000));\r",
															"pm.collectionVariables.set(\"subgroup3\", subgroup3);\r",
															"console.log(\"New testing subgroup3 \" + subgroup3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData=pm.response.json();\r",
															"\r",
															"pm.test(\"C735664 Validate Status Code 201 Created when creating a new group to test path\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735664 Validate response body after creating a new group to test path\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup3\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id3\",jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{subgroup3}}\",\r\n    \"description\" : \"This group is created to test created subgroup4 has a path\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": {{subgroup_id2}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroupLevel4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735665 Validate Status Code: 200 when sending a GET request to a subgroup on the fourth highest level\", function() {\r",
															"    pm.response.to.have.status(200); \r",
															"});\r",
															"\r",
															"pm.test(\"C735665 Validate response body when sending a valid GET request to a subgroup on the fourth highest level\", function (){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"});\r",
															"\r",
															"pm.test(\"Validate request body when sending a Get request to a subgroup on the fourth highest level\", function(){\r",
															"    pm.expect(resp.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\") + \"/\" + pm.collectionVariables.get(\"subgroup2\"));\r",
															"    pm.collectionVariables.set(\"subgroup3_path\", resp.path);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id3}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735666 Validate Status Code: 200 when sending a GET request to get the hierarchy of the subgroup on the third highest level\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735666 Validate response body when sending a GET request to get the inexisting path of the subgroup on the third highest level\", function() {\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"    pm.expect(jsonData.children).to.be.empty;\r",
															"    pm.expect(jsonData.path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\") + \"/\" + pm.collectionVariables.get(\"subgroup2\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id3}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id3}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel1_AfterAssiginingLevel4Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735667 Validate Status Code: 200 when sending a GET of the parent group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735667 Validate response body when sending a GET request to the parent group and validate children is second level subgroup\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    let actualChildrenArr = pm.response.json().children;\r",
															"    let subgroupCount = [];\r",
															"    for(a in actualChildrenArr){\r",
															"        if(resp.children[a].name == pm.collectionVariables.get(\"subgroup\")){\r",
															"        pm.expect(resp.children[a].name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"        pm.expect(resp.children[a].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\"));\r",
															"        subgroupCount.push(resp.children[a]);\r",
															"        let actualChildrenArr2 = pm.response.json().children[a].children;\r",
															"            for(b in actualChildrenArr2){\r",
															"                if(resp.children[a].children[b].name == pm.collectionVariables.get(\"subgroup2\")){\r",
															"                    pm.expect(resp.children[a].children[b].name).to.equal(pm.collectionVariables.get(\"subgroup2\"));\r",
															"                    pm.expect(resp.children[a].children[b].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\"));\r",
															"                    subgroupCount.push(resp.children[a].children[b]);\r",
															"                    let actualChildrenArr3 = pm.response.json().children[a].children[b].children;\r",
															"                    for(c in actualChildrenArr3){\r",
															"                        if(resp.children[a].children[b].children[c].name == pm.collectionVariables.get(\"subgroup3\")){\r",
															"                            pm.expect(resp.children[a].children[b].children[c].name).to.equal(pm.collectionVariables.get(\"subgroup3\"));\r",
															"                            pm.expect(resp.children[a].children[b].children[c].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\") + \"/\" + pm.collectionVariables.get(\"subgroup2\"));\r",
															"                            subgroupCount.push(resp.children[a].children[b].children[c]);\r",
															"                        }\r",
															"                    }\r",
															"                }\r",
															"            }\r",
															"\r",
															"        } \r",
															"    }\r",
															"    pm.expect(subgroupCount).to.have.lengthOf(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel2_AfterAssiginingLevel4Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735668 Validate Status Code: 200 when sending a GET of the second level subgroup and validate it is fourth level subgroup\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735668 Validate response body when sending a GET of the second level subgroup and validate children is fourth level subgroup\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    let actualChildrenArr = pm.response.json().children;\r",
															"    let subgroupCount = [];\r",
															"    for(a in actualChildrenArr){\r",
															"        if(resp.children[a].name == pm.collectionVariables.get(\"subgroup2\")){\r",
															"        pm.expect(resp.children[a].name).to.equal(pm.collectionVariables.get(\"subgroup2\"));\r",
															"        pm.expect(resp.children[a].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\"));\r",
															"        subgroupCount.push(resp.children[a]);\r",
															"        let actualChildrenArr2 = pm.response.json().children[a].children;\r",
															"            for(b in actualChildrenArr2){\r",
															"                if(resp.children[a].children[b].name == pm.collectionVariables.get(\"subgroup3\")){\r",
															"                    pm.expect(resp.children[a].children[b].name).to.equal(pm.collectionVariables.get(\"subgroup3\"));\r",
															"                    pm.expect(resp.children[a].children[b].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\") + \"/\" + pm.collectionVariables.get(\"subgroup2\"));\r",
															"                    subgroupCount.push(resp.children[a].children[b]);\r",
															"                }\r",
															"            }\r",
															"\r",
															"        }\r",
															"    }\r",
															"    pm.expect(subgroupCount).to.have.lengthOf(2);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyLevel3_AfterAssiginingLevel4Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735669 Validate Status Code: 200 when sending a GET of the third level subgroup and validate children is fourth level subgroup\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735669 Validate response body when sending a GET of the third level subgroup and validate children is fourth level subgroup\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    let actualChildrenArr = pm.response.json().children;\r",
															"    let subgroupCount = [];\r",
															"    for(a in actualChildrenArr){\r",
															"        if(resp.children[a].name == pm.collectionVariables.get(\"subgroup3\")){\r",
															"        pm.expect(resp.children[a].name).to.equal(pm.collectionVariables.get(\"subgroup3\"));\r",
															"        pm.expect(resp.children[a].path).to.equal(\"/\" + pm.collectionVariables.get(\"testing_group\") + \"/\" + pm.collectionVariables.get(\"subgroup\") + \"/\" + pm.collectionVariables.get(\"subgroup2\"));\r",
															"        subgroupCount.push(resp.children[a]);\r",
															"        }\r",
															"    }\r",
															"    pm.expect(subgroupCount).to.have.lengthOf(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id2}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id2}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIdsTreeAllLevels",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let firstChildren = pm.response.json().children;\r",
															"let expectedArr = [];\r",
															"\r",
															"pm.test(\"C735671 Validate Status Code: 200 when sending a GET request using an the parent group id to retrieve it's hierarchy tree up to the children on the fourth level\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735671 Validate response body when sending a GET request to retrieve all id's in the parent group's hierarchy tree up to the children on the fourth level\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    for(let f in firstChildren){\r",
															"        if(firstChildren[f].id === pm.collectionVariables.get(\"subgroup_id\")){\r",
															"        pm.expect(firstChildren[f].id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"        expectedArr.push(firstChildren[f]);\r",
															"        let secondChildren = firstChildren[f].children;\r",
															"        for(let s in secondChildren){\r",
															"            if(secondChildren[s].id === pm.collectionVariables.get(\"subgroup_id2\")){\r",
															"                pm.expect(secondChildren[s].id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"))\r",
															"                expectedArr.push(secondChildren[s]);\r",
															"                let thirdChildren = secondChildren[s].children;\r",
															"                for (let t in thirdChildren){\r",
															"                    if(thirdChildren[t].id === pm.collectionVariables.get(\"subgroup_id3\")){\r",
															"                    pm.expect(thirdChildren[t].id).to.equal(pm.collectionVariables.get(\"subgroup_id3\"));\r",
															"                    expectedArr.push(thirdChildren[t]);\r",
															"                    }\r",
															"                }\r",
															"            }\r",
															"            }\r",
															"        }\r",
															"        pm.expect(expectedArr).to.have.lengthOf(3);\r",
															"    }\r",
															"   \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetAllGroups_VerifySubgroupPaths",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\" Validate Status Code: 200 when sending a GET request to all groups\", function() {\r",
															"    pm.response.to.have.status(200); \r",
															"});\r",
															"\r",
															"pm.test(\" Validate response body's paths when sending a valid GET request to all groups\", function (){\r",
															"    for(let r in resp){     \r",
															"        switch(resp[r].id){\r",
															"            case pm.collectionVariables.get(\"subgroup_id\"): \r",
															"            pm.expect(resp[r].path).to.equal(pm.collectionVariables.get(\"subgroup_path\"));\r",
															"            break;\r",
															"            case pm.collectionVariables.get(\"subgroup_id2\"):\r",
															"            pm.expect(resp[r].path).to.equal(pm.collectionVariables.get(\"subgroup2_path\"));\r",
															"            break;\r",
															"            case pm.collectionVariables.get(\"subgroup_id3\"):\r",
															"            pm.expect(resp[r].path).to.equal(pm.collectionVariables.get(\"subgroup3_path\"));\r",
															"            break;\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_CreateGroup_AssignInvalidParentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData=pm.response.json();\r",
															"\r",
															"pm.test(\"C735672 Validate Status Code 400 Bad Request when to test path\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735672 Validate response body after creating a new group to test path\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    pm.expect(jsonData.message).to.equal(\"Invalid parent Id\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"This group is created to test created group has a path\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": 50\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_CreateGroup_TestPaths_LongPath",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735681 Validate Status Code 400 Bad Request when testing an invalid autogenerated long path\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735681 Validate response body after creating a new group to test path with an invalid long path\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"This group is created to test that a group cannot have a path longer than 255 characters\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": {{subgroup_id3}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_CreateGroup_TestPaths_LongName",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing with a very very very very very very very very very long long long long long name longer than 255 characters to make this test fail ................................................. \" + Math.floor((Math.random() * 100000000000) + 1000000000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735673 Validate Status Code 400 Bad Request when testing an invalid autogenerated long path\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735673 Validate response body after creating a new group to test path with an invalid long path\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    pm.expect(pm.response.json().errors[0].errorMessage).to.equal(\"size must be between 0 and 200\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"This group is created to test that a group cannot have a path longer than 255 characters\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"parentId\": {{subgroup_id}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteGroup_Level4Children",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735674 Validate Status Code: 204 No Content when sending a DELETE request to a subgroup on the 4th level\", function() {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C735674 Validate response body has no content when sending a DELETE request to a subgroup on the 4th level\", function(){\r",
															"pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id3}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteGroup_Level3Children",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735675 Validate Status Code: 204 No Content when sending a DELETE request to a subgroup on the 3rd level\", function() {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C735675 Validate response body has no content when sending a DELETE request to a subgroup on the 3rd level\", function(){\r",
															"pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id2}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteGroup_Level2Children",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735676 Validate Status Code: 204 No Content when sending a DELETE request to a subgroup on the 2nd level\", function() {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C735676 Validate response body has no content when sending a DELETE request to a subgroup on the 2nd level\", function(){\r",
															"pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteGroup_ParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735677 Validate Status Code: 400 Bad Request when sending a DELETE request to a parent group\", function() {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735677 Validate response body has bad request information when sending a DELETE request to a parent group\", function(){\r",
															"let jsonData = pm.response.json();\r",
															"pm.expect(jsonData.status).to.equal(400);\r",
															"pm.expect(jsonData.message).to.equal(\"Group can't be deleted\");\r",
															"pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_CreateGroup_ManuallyAssignPath",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735680 Validate Status Code: 201 Created when sending a POST request with a manually assigned path\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735680 Validate response body when sending a POST request with a valid JSON request Body\", function(){\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"});\r",
															"\r",
															"pm.test(\"C735680 Validate response body does not have the path manually assigned on the request body\", function(){\r",
															"    pm.expect(jsonData.path).to.not.equal(pm.collectionVariables.get(\"manuallyCreated_path\"))\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);\r",
															"\r",
															"var manuallyCreated_path = (\"create a path for testing \" + Math.floor((Math.random() + 1000000000)+ 1000000));\r",
															"pm.collectionVariables.set(\"manuallyCreated_path\", manuallyCreated_path);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"This is a group created for testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"path\" : \"{{manuallyCreated_path}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_ById_ValidateManuallyCreatedPathNotPresent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035893 Validate Status Code: 200 when sending a GET request searching a Group by Id to validate that the manually created path is not present\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035893 Validate response body id to validate that the manually created path property is not present\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    if(resp.path != null){\r",
															"        pm.expect(resp.path).to.not.equal(pm.collectionVariables.get(\"manuallyCreated_path\"));\r",
															"    }else pm.expect(resp).to.not.have.property(\"path\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteGroup_WithManuallyCreatedPath",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2035894 Validate Status Code: 400 Bad request when sending a DELETE request to the group with the manually created path\", function() {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035894 Validate response body has no content when sending a DELETE request to the group with manually created path\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Validate that paths are autogenerated correctly"
								},
								{
									"name": "validateCreateSubGroupsAndDelete",
									"item": [
										{
											"name": "Positive_CreateParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735682 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735682 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.collectionVariables.set(\"parent_group_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var parent_group = (\"parent group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"parent_group\", parent_group);\r",
															"console.log(\"New parent group \" + parent_group);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{parent_group}}\",\r\n    \"description\": \"Group created to be a parent and have subgroups assigned to it\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroup_BeforeSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735683 Validate Status Code: 200 Created when sending a GET request to search for the Parent Group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735683 Validate response body when sending a GET request to search for the Parent Group\", function() {\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{parent_group}}\",\r\n    \"description\": \"Group created to be a parent and have children assigned to it\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroupHierarchy_ParentBeforeSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735684 Validate Status Code: 200 OK when sending a GET request to retrieve Parent Group hierarchy before assigning subgroups to it\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735684 Validate response body has an empty 'children' attribute assigned to it\", function(){\r",
															"    pm.expect(jsonData.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_HierarchyIds_ParentBeforeSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\" Validate Status Code: 200 when sending a GET request searching a Group hierarchy tree ids\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\" Validate response body id does not have children when sending a GET request searching a Group hierarchy tree ids\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735685 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735685 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.collectionVariables.set(\"subgroup_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup = (\"subgroup \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup\", subgroup);\r",
															"console.log(\"New subgroup \" + subgroup);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroup}}\",\r\n    \"description\": \"Group created to be a subgroup\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{parent_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735686 Validate Status Code: 200 Created when sending a GET request to search for the subgroup\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735686 Validate response body when sending a GET request to search for the subgroup\", function() {\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{parent_group}}\",\r\n    \"description\": \"Group created to be a parent and have children assigned to it\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_HierarchyIds_Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735687 Validate Status Code: 200 when sending a GET request searching a Group hierarchy tree ids\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735687 Validate response body id have children when sending a GET request searching a Group hierarchy tree ids\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroupHierarchy_ParentAfterSubgroupCreation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735688 Validate Status Code: 200 OK when sending a GET request to validate parebt group id has a related subgroup\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735688 Validate that response body when sending a GET request to validate parebt group id has a related subgroup\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(resp.children[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(resp.children[0].name).to.equal(pm.collectionVariables.get(\"subgroup\")); \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_HierarchyIds_ParentAfterSubgroupCreation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735689 Validate Status Code: 200 when sending a GET request searching a Group hierarchy tree ids after generating a subgroup and assigning it to parent group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735689 Validate response body when sending a GET request searching a Group hierarchy tree ids after generating a subgroup and assigning it to parent group\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(resp.children[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_DeleteGroupWithSubgroupsAssociated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735690 Validate Status Code 400 Bad Request when deleting a parent with associated subgroups\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735690 Validate response body when deleting a parent with associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    pm.expect(pm.response.json().message).to.equal(\"Group can't be deleted\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteSubgroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735691 Validate Status Code 204 No Content when deleting a subgroup without subgroups\", function(){\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C735691 Validate response body when deleting a parent with associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735694 Validate Status Code: 404 Not Found when sending a GET request to search for the subgroup that was deleted\", function() {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"C735694 Validate response body when sending a GET request to search for the subgroup that was deleted\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{parent_group}}\",\r\n    \"description\": \"Group created to be a parent and have children assigned to it\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetGroup_HierarchyIds_SubgroupAfterDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735693 Validate Status Code: 404 Not Found when sending a GET request searching a Group hierarchy tree ids after deletion\", function() {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"C735693 Validate response status after sending a GET request to search a deleted Group hierarchy tree ids\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroupHierarchy_ParentAfterSubgroupDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735692 Validate Status Code: 200 OK when sending a GET request to validate parebt group id does not have a related subgroup\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735692 Validate that response body when sending a GET request to validate parent group id does not have a related subgroup\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_HierarchyIds_ParentAfterSubgroupDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735695 Validate Status Code: 200 when sending a GET request searching a Group hierarchy tree ids\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735695 Validate response body id does not have children when sending a GET request searching a Group hierarchy tree ids\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteParentWithoutSubgroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Validate Status Code 400 Bad Request when deleting a subgroup without subgroups\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response body when deleting a parent with associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_DeleteGroupWithoutData",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Validate Status Code 404 Bad Request when deleting a group without data\", function(){\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response body when deleting a parent with associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"    pm.expect(pm.response.json().message).to.equal(\"Group can't be deleted\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/50",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"50"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetParentGroup_AfterDeletionParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"[UMS-133] Validate Status Code: 404 Not Found when sending a GET request to search for the Parent Group after being deleted\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-133] Validate response body when sending a GET request to search for the Parent Group after deleting\", function () {\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{parent_group}}\",\r\n    \"description\": \"Group created to be a parent and have children assigned to it\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_GetGroup_HierarchyIds_ParentAfterDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test.skip(\"[UMS-133] C735695 Validate Status Code: 404 Not Found when sending a GET request to a deleted group\", function() {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-133] C735695 Validate response status when sending a GET request to a deleted group\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ValidateSubGroupsSameNameDifferentParent",
									"item": [
										{
											"name": "Positive_CreateParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735696 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body for testing subgroups can have same name when assigned to different parents\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735696 Validate response body when sending a POST request with a valid JSON request Body for testing subgroups can have same name when assigned to different parents\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateParentGroup2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735697 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body for testing subgroups can have same name when assigned to different parents\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735697 Validate response body when sending a POST request with a valid JSON request Body for testing subgroups can have same name when assigned to different parents\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"parent_group\"));\r",
															"    pm.collectionVariables.set(\"parent_group_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var parent_group = (\"parent group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"parent_group\", parent_group);\r",
															"console.log(\"New parent group \" + parent_group);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{parent_group}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetCreatedParents_BeforeSubGroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735698 Validate Status Code 200 OK when sending a GET request to validate both parent groups have been created for testing subgroups can have same name when assigned to different parents\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735698 Validate that response body has both parent groups that were created for testing subgroups can have same name when assigned to different parents\", function(){\r",
															"    let idArr= [];\r",
															"    for(var j in jsonData){\r",
															"        if(jsonData[j].id == pm.collectionVariables.get(\"testing_group_id\")){\r",
															"            idArr.push(jsonData[j].id);\r",
															"        }else if(jsonData[j].id == pm.collectionVariables.get(\"parent_group_id\")){\r",
															"            idArr.push(jsonData[j].id);\r",
															"        }\r",
															"    }\r",
															"    pm.expect(idArr).to.have.lengthOf(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroupHierarchy_ParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735699 Validate Status Code: 200 OK when sending a GET request to validate parebt group id has a related subgroup\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735699 Validate that response body when sending a GET request to validate parent group does not have children\", function(){\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"C735699 Validate that response body has the correct parent group id\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroupHierarchy_ParentGroup2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735700 Validate Status Code: 200 OK when sending a GET request to validate parebt group id has a related subgroup\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735700 Validate that response body when sending a GET request to validate parent group does not have children\", function(){\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"C735700 Validate that response body has the correct parent group id\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735701 Validate Status Code: 200 when sending a GET request to validate parent group does not have children\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735701 Validate response body when sending a GET request to validate parent group does not have children\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentGroup2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735702 Validate Status Code: 200 when sending a GET request to validate parent group does not have children\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735702 Validate response body when sending a GET request to validate parent group does not have children\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.children).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroup_SameName",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735703 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735703 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(resp.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup = (\"subgroup \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup\", subgroup);\r",
															"console.log(\"New subgroup \" + subgroup);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroup}}\",\r\n    \"description\": \"Group created to be a subgroup with same name\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{testing_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroupToParentGroup2_SameName",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735704 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735704 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(resp.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id2\", resp.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroup}}\",\r\n    \"description\": \"Group created to be a subgroup with same name\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{parent_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroupHierarchy_AfterSubgroupCreation_SameName",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735705 Validate Status Code: 200 OK when sending a GET request to validate parebt group id has a related subgroup\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735705 Validate that response body when sending a GET request to validate that a subgroup has been assigned to a parent group\", function(){\r",
															"    pm.expect(resp.children[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(resp.children[0].name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C735705 Validate that response body has indicated that the created subgroup has the correct parent group\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetParentGroupHierarchy_AfterSubgroupCreation2_SameName",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735706 Validate Status Code: 200 OK when sending a GET request to validate parebt group id has a related subgroup\", function (){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735706 Validate that response body when sending a GET request to validate parebt group id has a related subgroup\", function(){\r",
															"    pm.expect(resp.children[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    pm.expect(resp.children[0].name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C735706 Validate that response body has indicated that the created subgroup has the correct parent group\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentGroup_AfterSubgroupCreation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735707 Validate Status Code: 200 when sending a GET request to validate parent group has the correct children on the hierarchy id tree\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735707 Validate response body when sending a GET request to validate parent group has the correct children on the hierarchy id tree\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.children[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id\"))\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchyIds_ParentGroup2_AfterSubgroupCreation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C735708 Validate Status Code: 200 when sending a GET request to validate parent group2 has the correct children on the hierarchy id tree\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C735708 Validate response body when sending a GET request to validate parent group2 has the correct children on the hierarchy id tree\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"parent_group_id\"));\r",
															"    pm.expect(resp.children[0].id).to.equal(pm.collectionVariables.get(\"subgroup_id2\"));\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}/hierarchy/ids",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}",
														"hierarchy",
														"ids"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteSubgroup1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735709 Validate Status Code 204 No Content when deleting a subgroup without subgroups\", function(){\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C735709 Validate response body when deleting a parent with associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteSubgroup2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735710 Validate Status Code 204 No Content when deleting a subgroup without subgroups\", function(){\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C735710 Validate response body when deleting a parent with associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id2}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteParentGroupWithoutSubgroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735711 Validate Status Code 400 Bad Request when deleting a subgroup without subgroups\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735711 Validate response body when deleting a parent with associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteParentGroup2WithoutSubgroups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C735712 Validate Status Code 400 Bad Request when deleting a subgroup without subgroups\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C735712 Validate response body when deleting a parent without associated subgroups\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{parent_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{parent_group_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "validateUpdateGroupAndMetadata",
									"item": [
										{
											"name": "Positive_CreateParentGroup_UpdateMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035809 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body for testing update metadata\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035809 Validate response body when sending a POST request with a valid JSON request Body for testing update metadata\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.expect(jsonData.metadata).to.be.empty;\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035809 Validate that metadata attribute is empty\", function(){\r",
															"    pm.expect(jsonData.metadata).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"Group Created for Testing metadata\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroup_UpdateMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035831 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group to test metadata creation in subgroups\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035831 Validate Response Body when sending a POST request with a valid JSON Request Body to create a Subgroup to an existing Parent Group to test metadata cration in subgroups\", function() {\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(resp.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.expect(resp.metadata).to.be.empty;\r",
															"    pm.collectionVariables.set(\"subgroup_id\", resp.id);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035831 Validate that metadata attribute is empty\", function(){\r",
															"    pm.expect(resp.metadata).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var subgroup = (\"subgroup \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"subgroup\", subgroup);\r",
															"console.log(\"New subgroup \" + subgroup);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroup}}\",\r\n    \"description\": \"Group created to be a subgroup with same name\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{testing_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateCustomAttribute",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2037978 Validate Status Code : 201 Created when I create a new item for the Catalogue\", function (){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description\"));\r",
															"    pm.collectionVariables.set(\"key_id\", jsonData.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var key = (\"key for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"key\", key);\r",
															"console.log(\"New key \" + key);\r",
															"\r",
															"var description = (\"description for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"description\", description);\r",
															"console.log(\"New description \" + description);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"key\": \"{{key}}\",\r\n    \"description\": \"{{description}}\"\r\n}"
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"metadata",
														"keys"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetCreatedCustomAttribute",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2037979 Validate Status Code: 200 OK when retrieving all metadata from the cataloque\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2037980 Validate response body has the previously generated Custom attribute\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"key_id\"));\r",
															"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{key_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"metadata",
														"keys",
														"{{key_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_UMS_UpdateMetadataParentGroupById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035832 Validate Status Code: 200 when updating a Custom Attribute from the Group Id to validate metadata exists\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2035832 Validate Response body has the updated metadata\", function (){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"        pm.expect(value).to.equal(pm.collectionVariables.get(\"value\"));\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let value = (\"value for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"value\", value);\r",
															"console.log(\"value \" + value);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n    \"key\" : \"{{key}}\",\r\n    \"value\":\"{{value}}\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/metadata",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"metadata"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_UpdateParentGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
															"console.log(\"Update description \" + updateDescription);\r",
															"\r",
															"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"updateType\", updateType);\r",
															"console.log(\"Update type \" + updateType);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035954 Validate Status Code to be 200 OK when updating the type and description from a parent group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate response body to contain the updated type and description after updating\", function(){\r",
															"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
															"    pm.expect(pm.response.text()).to.not.contain(\"not valid\");\r",
															"    pm.expect(jsonData.enabled).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_ById_MetadataParentGroupBeforeSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035834 Validate Status Code: 200 when sending a GET request searching a Group by Id to validate the correct metadata exists in a Parent Group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035834 Validate that response body has the corresponding metadata exists in a Parent Group\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"        pm.expect(value).to.equal(pm.collectionVariables.get(\"value\"));\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Negative_UpdateMetadataUsingInexistentKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035833 Validate Status Code: 400 Bad Request when updating a Custom Attribute sending an inexistent Key\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"C2035833 Validate Response returns error 'Provided Key doesn't exist'\", function (){\r",
															"    pm.expect(jsonData.message).to.equal(\"Provided Key doesn't exist\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let new_customAttribute_subgroup = (\"a new attribute for subgroup no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"new_customAttribute_subgroup\", new_customAttribute_subgroup);\r",
															"console.log(\"New generated custom attribute for subgroup \" + new_customAttribute_subgroup);\r",
															"\r",
															"let value_subgroup = (\"value for testing subgroup \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"value_subgroup\", value_subgroup);\r",
															"console.log(\"value subgroup \" + value_subgroup);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"key\" : \"{{new_customAttribute_subgroup}}\",\r\n        \"value\":\"{{value_subgroup}}\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/metadata",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"metadata"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_UMS_UpdateMetadataSubgroupById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035833 Validate Status Code: 200 when updating a Custom Attribute from the Group Id to validate metadata exists\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035833 Validate Response body has the updated metadata\", function (){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"        pm.expect(value).to.equal(pm.collectionVariables.get(\"value_subgroup\"));\r",
															"    } \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let new_customAttribute_subgroup = (\"a new attribute for subgroup no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"new_customAttribute_subgroup\", new_customAttribute_subgroup);\r",
															"console.log(\"New generated custom attribute for subgroup \" + new_customAttribute_subgroup);\r",
															"\r",
															"let value_subgroup = (\"value for testing subgroup \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"value_subgroup\", value_subgroup);\r",
															"console.log(\"value subgroup \" + value_subgroup);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"key\" : \"{{key}}\",\r\n        \"value\":\"{{value_subgroup}}\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/metadata",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"metadata"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_UpdateSubgroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var updateDescription_subgroup = (\"Update Description subgroup\" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"updateDescription_subgroup\", updateDescription_subgroup);\r",
															"console.log(\"Update description subgroup \" + updateDescription_subgroup);\r",
															"\r",
															"var updateType_subgroup = (\"Update type subgroup \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"updateType_subgroup\", updateType_subgroup);\r",
															"console.log(\"Update type subgroup\" + updateType_subgroup);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035955 Validate Status Code to be 200 OK when updating the type and description from a parent group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035955 Validate response body to contain the updated type and description after updating\", function(){\r",
															"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get(\"updateType_subgroup\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"updateDescription_subgroup\"));\r",
															"    pm.expect(pm.response.text()).to.not.contain(\"not valid\");\r",
															"    pm.expect(jsonData.enabled).to.be.true;\r",
															"     for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"        pm.expect(value).to.equal(pm.collectionVariables.get(\"value_subgroup\"));\r",
															"\r",
															"    } \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription_subgroup}}\",\r\n    \"type\": \"{{updateType_subgroup}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_ById_MetadataParentGroupBeforeDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035835 Validate Status Code: 200 when sending a GET request searching a Group by Id to validate the correct metadata exists in a Parent Group\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035835 Validate that response body has the corresponding metadata exists in a Parent Group\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"        pm.expect(value).to.equal(pm.collectionVariables.get(\"value\"));\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body of the parent group has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchy_MetadataParentGroupBeforeDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"let childMetadataObj = pm.response.json().children[0].metadata;\r",
															"\r",
															"pm.test(\"C2035836 Validate Status Code: 200 when sending a GET request to validate Metadata appears on the hierarchy\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035836 Validate response body when sending a GET request using an ID with hierarchy '2'\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C2035836 Validate that response body has the updated Metadata for Parent Group\", function(){\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"           pm.expect(value).to.equal(pm.collectionVariables.get(\"value\"));\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body from parent group has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
															"})\r",
															"\r",
															"pm.test(\"C2035836 Validate that response body has the updated Metadata for Subgroup\", function(){\r",
															"    for(let [key, value] of Object.entries(childMetadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"           pm.expect(value).to.equal(pm.collectionVariables.get(\"value_subgroup\"));\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body from subgroup has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.children[0].type).to.equal(pm.collectionVariables.get(\"updateType_subgroup\"));\r",
															"    pm.expect(resp.children[0].description).to.equal(pm.collectionVariables.get(\"updateDescription_subgroup\"));\r",
															"})\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_ById_MetadataSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035837 Validate Status Code: 200 when sending a GET request searching a Group by Id to validate the correct metadata exists in a subgroup\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035837 Validate that response body has the corresponding metadata in a subgroup\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(resp.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"           pm.expect(value).to.equal(pm.collectionVariables.get(\"value_subgroup\"));\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"C2035955 Validate that response body of the subgroup has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType_subgroup\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription_subgroup\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchy_MetadataSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035838 Validate Status Code: 200 when sending a GET request to validate Metadata appears on the hierarchy of a subgroup\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035838 Validate response body when sending a GET request using an ID to validate metadata exists on a subgroup's hierarchy\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C2035838 Validate that response body has the updated Metadata in a subgroup\", function(){\r",
															"        for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"        pm.expect(value).to.equal(pm.collectionVariables.get(\"value_subgroup\"));\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body from subgroup has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType_subgroup\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription_subgroup\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_UMS_UpdateCreatedMetadataSubgroupById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035839 Validate Status Code: 200 when updating a Custom Attribute from the Group Id to validate metadata exists \", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035839 Validate Response body has the updated metadata\", function (){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"))\r",
															"        pm.expect(value).to.equal(\"false\");\r",
															"    } \r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body from subgroup has the updated type and description attributes\",  function(){\r",
															"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get(\"updateType_subgroup\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"updateDescription_subgroup\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"key\" : \"{{key}}\",\r\n        \"value\":\"false\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}/metadata",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}",
														"metadata"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_ById_MetadataSubgroup_AfterUpdate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"let metadataObj = pm.response.json().metadata;\r",
															"\r",
															"pm.test(\"C2035840 Validate Status Code: 200 when sending a GET request searching a Group by Id to validate the correct metadata exists in a subgroup\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035840 Validate that response body has the corresponding metadata in a subgroup\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.expect(resp.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    for(let [key, value] of Object.entries(metadataObj)){\r",
															"        pm.expect(key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"        pm.expect(value).to.equal(\"false\");\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body from subgroup has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType_subgroup\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription_subgroup\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteMetadata_ParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let response = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035841 Validate Status Code : 200 OK when deleting metadata from a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035841 Validate response body when deleting metadata from a group\", function(){\r",
															"    pm.expect(response.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(response.metadata).to.be.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body from parent group has the updated type and description attributes\",  function(){\r",
															"    pm.expect(response.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
															"    pm.expect(response.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    \"{{key}}\"\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/metadata",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"metadata"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetGroup_ById_MetadataAfterDeletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035842 Validate Status Code: 200 when sending a GET request searching a Group by Id to validate metadata from parent group has been deleted\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035842 Validate that response body has the corresponding Id to validate metadata from parent group has been deleted\", function(){\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"   pm.expect(resp.metadata).to.be.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"C2035954 Validate that response body from subgroup has the updated type and description attributes\",  function(){\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetHierarchy_MetadataAfterDelete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C2035843 Validate Status Code: 200 when sending a GET request using an ID  to validate metadata has been deleted from parent's group hierarchy\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035843 Validate response body when sending a GET request using an ID to validate metadata has been deleted from parent's group hierarchy\", function() {\r",
															"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.expect(resp.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
															"    pm.expect(resp.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C2035843 Validate that response body has the updated Metadata to validate metadata has been deleted from parent's group hierarchy\", function(){\r",
															"    pm.expect(resp.metadata).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/hierarchy",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}",
														"hierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteSubgroupWithMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2035844 Validate Status Code: 204 No Content when sending a DELETE request with a valid id to delete a subgroup with metadata\", function() {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035844 Validate response body is empty to delete a subgroup with metadata\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"No Content\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_DeleteGroup_UpdateMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2035845 Validate Status Code: 400 Bad Request when sending a DELETE request with a valid id to delete a parent group without subgroups assigned to it\", function() {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"C2035845 Validate response body is empty when deleting a parent group without subgroups assigned to it\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "bearer",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups",
														"{{testing_group_id}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Validate that Metadata can be updated and deleted"
								}
							]
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_InvalidContent-Type_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036337 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups and subgroups sending an invalid Content-Type='SELECT * FROM GROUP_ID'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM GROUP_ID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/3/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"3",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_InvalidContent-Type_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036336 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups and subgroups sending an empty Content-Type=' '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "     ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/3/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"3",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_InvalidContent-Type_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036335 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups and subgroups sending an invalid Content-Type='abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/3/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"3",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_InvalidContent-Type_gzip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036334 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups and subgroups sending an invalid Content-Type='application/gzip'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/gzip",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036333 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups and subgroups with an invalid Authorization Header = 'SELECT * FROM USER_ID'\", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM USER_ID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/3/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"3",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_Unauthorized_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036332 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups and subgroups with an empty Authorization Header = ' '\", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.status).to.equal(\"UNAUTHORIZED\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Empty OAUTH Token.\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/3/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"3",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_Unauthorized_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-202] C2036331 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups and subgroups with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/3/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"3",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036330 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups and subgroups without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_LongId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036329 Validate Status Code to be 400 Bad Request when I want to retrieve all users from groups and subgroups sending a very long group id over 50 characters\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036329 Validate response body has all users in groups and subgroups sending a very long group id over 50 characters\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.path).to.contain(\"1234567891012345678920123467893012345678940123456789050\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1234567891012345678920123467893012345678940123456789050/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1234567891012345678920123467893012345678940123456789050",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroupsAndSubgroups_InexistentGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036328 Validate Status Code to be 404 Not Found when I want to retrieve all users from groups and subgroups when searching an inexistent group id\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036328 Validate response body has all users in groups and subgroups when searching an inexistent group id\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(404)\r",
											"    pm.expect(jsonData.message).to.equal(\"Group does not exist.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/000111000101/hierarchy/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"000111000101",
										"hierarchy",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036327 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups with an invalid Content-Type Header = 'SELECT ID FROM GROUP'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT ID FROM GROUP",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036325 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups with an invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036326 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups with an empty Content-Type Header = ' '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_InvalidContentType_x-www-form-urlencoded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036324 Validate Status Code to be 415 Unsupported Media Type when I want to retrieve all users from groups with an invalid Content-Type Header = 'application/x-www-form-urlencoded'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036323 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups with an invalid Authorization Header = 'SELECT ID FROM USERS'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT ID FROM USERS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_Unauthorized_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036322 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_Unauthorized_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036321 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups with an empty Authorization Header = ' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(\"UNAUTHORIZED\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Empty OAUTH Token.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036320 Validate Status Code to be 401 Unauthorized when I want to retrieve all users from groups without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_LongId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036319 Validate Status Code to be 400 Bad Request when I want to retrieve all users sending a long group id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036319 Validate response body has all users in groups sending a long group id\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.contain(\"Bad request\");\r",
											"    pm.expect(jsonData.path).to.contain(\"10010010000240333330394820082304823049820394\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/10010010000240333330394820082304823049820394/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"10010010000240333330394820082304823049820394",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUsersFromGroup_InexistentGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036318 Validate Status Code to be 404 Not Found when I want to retrieve all users sending an inexistent group id\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036318 Validate response body has all users in groups sending an inexistent group id\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platform_url}}/ums/admin/groups/1/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"ums",
										"admin",
										"groups",
										"1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_CreateGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C734377 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"C734377 Validate response body when sending a POST request with a valid JSON request Body\", function(){\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
											"console.log(\"New testing group \" + testing_group);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"This is a group created for testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"path\" : \"/Rebellion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_ZeroLength",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[C2035846 Validate Status Code: 400 Created when sending a POST request with a valid JSON Request Body with name with a length = ''\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035846 Validate response body when sending a POST request with a valid JSON request Body with name with a length = ''\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"\",\r\n    \"description\" : \"This is a group created for testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"path\" : \"/Rebellion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_CreateGroup_JapaneseCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035847 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035847 Validate response body when sending a POST request with a valid JSON request Body\", function(){\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"specialChar_group\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var specialChar_group = (\"秋絵, 昭恵, あきえ\" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"specialChar_group\", specialChar_group);\r",
											"console.log(\"New testing group special symbols \" + specialChar_group);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{specialChar_group}}\",\r\n    \"description\" : \"This is a group created for testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_EmptyReqBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735624 Validate Status Code: 400 Bad Request when sending a POST without a request body\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C735624 Validate response body when sending a POST without a request body\", function() {\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();\r",
											"\r",
											"jar.clear(pm.request.url, function (error) {\r",
											"// error - <Error>\r",
											"});\r",
											"\r",
											"var new_group_negativeScenario = (\"test group to create for negative scenarios  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"new_group_negativeScenario\", new_group_negativeScenario);\r",
											"console.log(\"New generated group for testing negative scenarios \" + new_group_negativeScenario);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"C735625 Validate Status Code: 401 Created when sending a POST request with without Authorization Token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735625 Validate response body when sending a POST request without an Authorization Token\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{new_group_negativeScenario}}\",\r\n    \"description\" : \"This is used to test unauthorized/invalid content-type cannot generate a new group\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_Unauthorized_EmptyAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-186] C735491 Validate Status Code: 401 Unauthorized Created when sending a POST request with an empty Authorization Header ' '\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-186] C735491 Validate response body when sending a POST request with an empty Authorization Header ' '\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();\r",
											"\r",
											"jar.clear(pm.environment.get(\"platform_url\"), function (error) {\r",
											"// error - <Error>\r",
											"});\r",
											"\r",
											"var new_group_negativeScenario = (\"test group to create for negative scenarios  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"new_group_negativeScenario\", new_group_negativeScenario);\r",
											"console.log(\"New generated group for testing negative scenarios \" + new_group_negativeScenario);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "   ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{new_group_negativeScenario}}\",\r\n    \"description\" : \"This is used to test unauthorized/invalid content-type cannot generate a new group\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_Unauthorized_InvalidAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735492 Validate Status Code: 401 Created when sending a POST request with an invalid Authorization Header 'abcdef'\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735492 Validate response body when sending a POST request with an invalid Authorization Header 'abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var new_group_negativeScenario = (\"test group to create for negative scenarios  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"new_group_negativeScenario\", new_group_negativeScenario);\r",
											"console.log(\"New generated group for testing negative scenarios \" + new_group_negativeScenario);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{new_group_negativeScenario}}\",\r\n    \"description\" : \"This is used to test unauthorized/invalid content-type cannot generate a new group\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups?Authorization=abcdef",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "abcdef"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735493 Validate Status Code: 401 Unauthorized when sending a POST request with an invalid Authorization Header 'SELECT * FROM GROUPS'\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735493 Validate response body  when sending a POST request with an invalid Authorization Header 'SELECT * FROM GROUPS'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var new_group_negativeScenario = (\"test group to create for negative scenarios  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"new_group_negativeScenario\", new_group_negativeScenario);\r",
											"console.log(\"New generated group for testing negative scenarios \" + new_group_negativeScenario);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{new_group_negativeScenario}}\",\r\n    \"description\" : \"This is used to test unauthorized/invalid content-type cannot generate a new group\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups?Authorization=SELECT * FROM GROUPS",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "SELECT * FROM GROUPS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_InvalidContentType_zip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735626 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'application/zip'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735626 Validate response body when submitting a GET request sending an invalid content-type 'application/zip'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/zip",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"Grogu\",\r\n    \"description\" : \"Testing that group cannot be created with an invalid content-type\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"path\" : \"/Rebellion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_InvalidContentType_InvalidString",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735495 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'abcdef'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735495 Validate response body when submitting a GET request sending an invalid content-type 'abcdef'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"Grogu\",\r\n    \"description\" : \"Testing that group cannot be created with an invalid content-type\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"path\" : \"/Rebellion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups?",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									],
									"query": [
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_InvalidContentType_EmptyString",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735490 Validate response Code 415 Unsupproted Media type  when sending an empty content-type '   '\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735490 Validate response body when submitting a GET request sending an empty content-type '   '\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"Grogu\",\r\n    \"description\" : \"Testing that group cannot be created with an invalid content-type\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"path\" : \"/Rebellion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateGroup_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735627 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'SELECT * FROM GROUP'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735627 Validate response body when submitting a GET request sending an invalid content-type 'SELECT * FROM GROUP'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM GROUP",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"Grogu\",\r\n    \"description\" : \"Testing that group cannot be created with an invalid content-type\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true,\r\n    \"path\" : \"/Rebellion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"C734330 Validate Status Code: 200 when sending a GET request\", function() {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"C734330 Validate response body when sending a valid GET request\", function (){\r",
											"    pm.expect(resp).to.have.own.property(\"id\");\r",
											"    pm.expect(resp.metadata).to.haveOwnProperty(\"Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035884 Validate Status Code: 401 Unauthorized when sending GET request without authorization token\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C2035884 Validate response body when sending GET request without authorization token\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_Unauthorized_InvalidAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035885 Validate Status Code: 401 Unauthorized when sending GET request with an invalid authorization token 'abcdef'\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C2035885 Validate response body when sending GET request with an invalid authorization token 'abcdef'\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_Unauthorized_EmptyAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-187] C2035886 Validate Status Code: 401 Unauthorized when sending GET request with an empty authorization token ' '\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C2035886 Validate response body when sending GET request with an empty authorization token ' '\", function (){\r",
											"    let resp = pm.response.json();\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035887 Validate Status Code: 401 Unauthorized when sending GET request with an invalid authorization token 'SELECT * FROM GROUPS'\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C2035887 Validate response body when sending GET request with an invalid authorization token 'SELECT * FROM GROUPS'\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM GROUPS",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_InvalidContentType_XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035892 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'XML'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035892 Validate response body when submitting a GET request sending an invalid content-type 'XML'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_InvalidContentType_PDF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035891 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'PDF'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035891 Validate response body when submitting a GET request  when sending an invalid content-type 'PDF'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/pdf",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035888 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'abcdef'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035888 Validate response body when submitting a GET request  when sending an invalid content-type 'abcdef'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035890 Validate response Code 415 Unsupproted Media type  when sending an empty content-type ' '\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035890 Validate response body when submitting a GET request  when sending an empty content-type ' '\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_InvalidContentType_SQLinjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035889 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'SELECT * FROM GROUPS'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035889 Validate response body when submitting a GET request  when sending an invalid content-type 'SELECT * FROM GROUPS'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM GROUPS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetGroup_ById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C734373 Validate Status Code: 200 when sending a GET request searching a Group by Id\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C734373 Validate response body id\", function(){\r",
											"    pm.expect(resp.id.toString()).to.equal(pm.collectionVariables.get(\"group_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_InexistentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C734375 Validate Status Code: 404 Not Found when sending a GET request searching a Group with inexisting Id '12345'\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C734375 Validate response body when sending a GET request searching a Group with inexisting Id '12345'\", function() {\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/12345",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"12345"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C734374 Validate Status Code: 400 Bad Request when sending a GET request searching a Group with invalid Id '%$#&\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C734374 Validate response body when sending a GET request searching a Group with invalid Id '%$#&\", function() {\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/%$#&",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"%$"
									],
									"hash": "&"
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_LongGroupIdNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735564 Validate Status Code: 400 when sending a GET request searching a Group with an invalid Id (>20 characters) '11111111111111111111'\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C735564 Validate response body shows bad request status\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/11111111111111111111",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"11111111111111111111"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C735565 Validate Status Code: 401 Unauthorized when sending GET request without authorization token\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C735565 Validate response body when sending GET request without authorization token\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_Unauthorized_NoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C735566 Validate Status Code: 401 Unauthorized when sending GET request without authorization token\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C735566 Validate response body when sending GET request without authorization token\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "12345",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_Unauthorized_EmptyAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C735567 Validate Status Code: 401 Unauthorized when sending GET request with an empty authorization token ' '\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C735567 Validate response body when sending GET request with an empty authorization token ' '\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_Unauthorized_InvalidAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735568 Validate Status Code: 401 Unauthorized when sending GET request with an invalid authorization token 'abcdef'\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C735568 Validate response body when sending GET request with an invalid authorization token 'abcdef'\", function (){\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C735569 Validate Status Code: 401 Unauthorized when sending GET request with an invalid authorization token 'abcdef'\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C735569 Validate response body when sending GET request with an invalid authorization token 'abcdef'\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM GROUPS",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_InvalidContentType_graphql",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735570 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'application/graphql'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735570 Validate response body when submitting a GET request sending an invalid content-type 'application/graphql'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/graphql",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735571 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'abcdef'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735571 Validate response body when submitting a GET request sending an invalid content-type 'abcdef'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735572 Validate response Code 415 Unsupproted Media type  when sending an empty content-type ' '\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735572 Validate response body when submitting a GET request  when sending an empty content-type ' '\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetGroup_ById_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735573 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'SELECT * FROM GROUPS'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735573 Validate response body when submitting a GET request sending an invalid content-type 'SELECT * FROM GROUPS'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM GROUPS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetHierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C735574 Validate Status Code: 200 when sending a GET request using an ID with a hierarchy_id\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C735574 Validate response body when sending a GET request using an ID with a hierarchy_id\", function() {\r",
											"    pm.expect(resp.id.toString()).to.equal(pm.collectionVariables.get(\"hierarchy_id\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_InexistingGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735575 Validate Status Code: 404 Not Found when sending an invalid GET request using an inexisting Group ID '123456789'\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C735575 Validate response body when sending an invalid GET request using an inexisting Group ID '123456789'\", function() {\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/123456789/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"123456789",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735576 Validate Status Code: 400 Bad Request when sending an invalid GET request using an invalid Group ID '*%#&'\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C735576 Validate response body when sending an invalid GET request using an invalid Group ID '*%#&'\", function() {\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/*%#&/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"*%"
									],
									"hash": "&/hierarchy"
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C735577 Validate Status Code: 401 Unauthorized when sending GET request without authorization token\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C735577 Validate response body when sending GET request without authorization token\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_Unauthorized_InvalidAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C735578 Validate Status Code: 401 Unauthorized when sending GET request with an invalid authorization token ='abcdef'\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C735578 Validate response body when sending GET request with an invalid authorization token ='abcdef'\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_Unauthorized_EmptyAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C735579 Validate Status Code: 401 Unauthorized when sending GET request with an empty authorization token=' '\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C735579 Validate response body when sending GET request with an empty authorization token = ' '\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"\r",
											"pm.test(\"C735580 Validate Status Code: 401 Unauthorized when sending GET request with an invalid authorization token 'SELECT * FROM ID'\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"C735580 Validate response body when sending GET request  with an invalid authorization token 'SELECT * FROM ID'\", function (){\r",
											"    pm.expect(resp.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(resp.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "SELECT * FROM ID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_ById_InvalidContentType_javascript",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'application/javascript'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body when submitting a GET request sending an invalid content-type 'application/javascript'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/javascript",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_ById_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735582 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'abcdef'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735582 Validate response body when submitting a GET request sending an invalid content-type 'abcdef'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_ById_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735581 Validate response Code 415 Unsupproted Media type  when sending an empty content-type ' '\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735581 Validate response body when submitting a GET request  when sending an empty content-type ' '\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchy_ById_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735583 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'SELECT * FROM GROUPS'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735583 Validate response body when submitting a GET request sending an invalid content-type 'SELECT * FROM GROUPS'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM GROUPS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetHierarchyIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resp = pm.response.json();\r",
											"let jsonData = pm.response.json();\r",
											"let firstChild= jsonData.children;\r",
											"var firstArr= [];\r",
											"var secondArr=[];\r",
											"\r",
											"pm.test(\"C734407 Validate Status Code: 200 when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C734407 Validate response body when sending a GET request using an ID with hierarchy '1' and receiving only Id's\", function(){\r",
											"    pm.expect(resp.id.toString()).to.equal(pm.collectionVariables.get(\"hierarchy_id\"));\r",
											"    for(let f in firstChild){\r",
											"        if(firstChild[f].children.length >0){\r",
											"            firstArr.push(firstChild[f]);\r",
											"            let secondChild = firstChild[f];\r",
											"            for(let s in secondChild){\r",
											"                if (secondChild[s].length > 1){\r",
											"                    secondArr.push(secondChild[s]);\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"    pm.expect(firstArr.length).to.equal(1);\r",
											"    pm.expect(secondArr.length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735562 Validate Status Code: 400 when sending an invalid GET request using special characters instead of an id: '%#!'\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C735562 Validate response body when sending a GET request using special characters instead of an id: '%#!'\", function(){\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/%#!/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"%"
									],
									"hash": "!/hierarchy/ids"
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_LongNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735563 Validate Status Code: 40 Bad Request when sending an invalid GET request using an invalid group ID '1111111111111111111111111111111111111111111111'\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C735563 Validate response body when sending a GET request using an invalid group ID '1111111111111111111111111111111111111111111111'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1111111111111111111111111111111111111111111111/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1111111111111111111111111111111111111111111111",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735584 Validate Status Code: 401 when sending an unauthorized GET without authorization token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735584 Validate response body  when sending an unauthorized GET without authorization token\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_Unauthorized_InvalidAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735586 Validate Status Code: 401 when sending an unauthorized GET an invalid authorization header = 'abcdef'\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735586 Validate response body  when sending an unauthorized GET with an invalid authorization header = 'abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_Unauthorized_EmptyAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-187] C735596 Validate Status Code: 401 when sending an unauthorized GET an invalid authorization header\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C735596 Validate response body  when sending an unauthorized GET with an invalid authorization header\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735601 Validate Status Code: 401 when sending an unauthorized GET an invalid authorization header 'SELECT * FROM GROUP'\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735601 Validate response body  when sending an unauthorized GET with an invalid authorization header 'SELECT * FROM GROUP'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM GROUP",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_InvalidContentType_postscript",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735602 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'application/postscript'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735602 Validate response body when submitting a GET request sending an invalid content-type 'application/postscript'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/postscript",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735603 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'abcdef'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735603 Validate response body when submitting a GET request sending an invalid content-type 'abcdef'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735604 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'abcdef'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735604 Validate response body when submitting a GET request sending an invalid content-type 'abcdef'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{group_id}}/hierarchy/ids",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{group_id}}",
										"hierarchy",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetHierarchyIds_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735609 Validate response Code 415 Unsupproted Media type  when sending an invalid content-type 'SELECT * FROM HIERARCHY'\",function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C735609 Validate response body when submitting a GET request sending an invalid content-type 'SELECT * FROM HIERARCHY'\", function(){\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM HIERARCHY",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{hierarchy_id}}/hierarchy",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{hierarchy_id}}",
										"hierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UMS_DeleteGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"C734406 Validate Status Code: 204 No Content when sending a DELETE request with a valid id\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"C734406 Validate response body is empty\", function(){\r",
											"pm.expect(pm.response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_DeleteGroup_InexistentResource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735610 Validate Status Code: 404 Not Found submitting a DELETE request to an inexisting resource\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C735610 Validate response body when sending a DELETE request resource cannot be deleted when it does not exist\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Group can't be deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/16",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"16"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_DeleteGroup_ZeroValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735613 Validate Status Code: 404 Not Found submitting a DELETE request to an inexisting resource with value ='0000'\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C735613 Validate response body when sending a DELETE request resource with value = '0000' cannot be deleted when it does not exist\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Group can't be deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/0000000",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"0000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_DeleteGroup_LongStringNumbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"C735617 Validate Status Code: 400 Bad Request submitting a DELETE request to an inexisting resource\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C735617 Validate response body when sending a DELETE request resource cannot be deleted when it does not exist\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/010101010101010000000000000000000000000000000000000000000000000000000",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"010101010101010000000000000000000000000000000000000000000000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_DeleteGroup_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C735623 Validate Status Code: 401 Unauthorized submitting a DELETE request to an inexisting resource without Authorization Token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735623 Validate response body when sending a DELETE request to an inexisting resource without Authorization Token\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_DeleteGroup_Unauthorized_EmptyAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-186] C735628 Validate Status Code: 401 Unauthorized submitting a DELETE request with an empty Authorization Header = ' '\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-186] C735628 Validate response body when sending a DELETE request with an empty Authorization Header = ' '\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_DeleteGroup_Unauthorized_InvalidAuthHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735629 Validate Status Code: 401 Unauthorized submitting a DELETE request with an invalid Authorization Header = 'abcdef'\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735629 Validate response body when sending a DELETE request with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_DeleteGroup_Unauthorized_InvalidAuthHeaderSQL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C735630 Validate Status Code: 401 Unauthorized submitting a DELETE request with an invalid Authorization Header = 'SELECT * FROM ID'\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C735630 Validate response body when sending a DELETE request with an invalid Authorization Header = 'SELECT * FROM ID'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM ID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UMS_UpdateMetadataGroupById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"C2035848 Validate Status Code: 200 when updating a Custom Attribute from the Group Id to validate metadata exists\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"C2035848 Validate Response body has the updated metadata\", function (){\r",
											"    let jsonData = pm.response.json();\r",
											"    let metadataObj = pm.response.json().metadata;\r",
											"    pm.expect(jsonData.id.toString()).to.equal(pm.collectionVariables.get(\"metadata_group_id\"));\r",
											"    for(let [key, value] of Object.entries(metadataObj)){\r",
											"        pm.expect(key).to.equal(pm.collectionVariables.get(\"metadata_attribute\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UMS_UpdateMetadataGroupById_JapaneseCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test.skip(\"C2035849 Validate Status Code: 200 when updating a Custom Attribute from the Group Id to validate metadata exists\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"C2035849 Validate Response body has the updated metadata\", function (){\r",
											"    let jsonData = pm.response.json();\r",
											"let metadataObj = pm.response.json().metadata;\r",
											"    pm.expect(jsonData.id.toString()).to.equal(pm.collectionVariables.get(\"metadata_group_id\"));\r",
											"    for(let [key, value] of Object.entries(metadataObj)){\r",
											"        pm.expect(key).to.equal(pm.collectionVariables.get(\"specialChar_group\"));\r",
											"        pm.expect(value).to.equal(pm.collectionVariables.get(\"specialChar_group\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{specialChar_group}}\",\r\n        \"value\":\"{{specialChar_group}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_LongId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035850 Validate Status Code: 400 when trying to update the Metadata of a group with a long Id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035850 Validate Response body when trying to update the Metadata of a group with a long Id\", function (){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1234567890123456789123/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1234567890123456789123",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_InexistentGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035851 Validate Status Code: 404 Not Found when trying to update the Metadata of an inexisting Group Id = '01010101010' \", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035851 Validate Response body when trying to update the Metadata  of an inexisting Group Id ='01010101010'\", function (){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/01010101010/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"01010101010",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035853 Validate Status Code: 404 Not Found when sending a special characters ='*$#%' as group Id\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035853 Validate Response body when sending a special characters ='*$#%' as group Id\", function (){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/*$#%/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"*$"
									],
									"hash": "%/metadata"
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035852 Validate Status Code: 401 Unauthorized when sending a request without Authorization token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035852 Validate Response body when sending a request without Authorization token\", function (){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_Unauthorized_AuthHeader_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-186] C2035854 Validate Status Code: 401 Unauthorized when sending a request with an empty Authorization Header = ' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-186] C2035854 Validate Response body when sending a request with an empty Authorization Header = ' '\", function (){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_Unauthorized_AuthHeader_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035855 Validate Status Code: 401 Unauthorized when sending a request with an invalid Authorization token = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035855 Validate Response body when sending a request with an invalid Authorization token = 'abcdef'\", function (){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_Unauthorized_AuthHeader_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035856 Validate Status Code: 401 Unauthorized when sending a request with an invalid Authorization token = 'SELECT * FROM METADATA'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035856 Validate Response body when sending a request with an invalid Authorization token = 'SELECT * FROM METADATA'\", function (){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM METADATA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_InvalidContent-Type_x-yaml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035857 Validate Status Code: 415 Unsupported Media Type when sending a request with an invalid Content-Type header = 'application/x-yaml'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035857 Validate Response body when sending a request with an invalid Content-Type header = 'application/x-yaml'\", function (){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-yaml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_InvalidContent-Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035859 Validate Status Code: 415 Unsupported Media Type when sending a request with an empty Content-Type header = ' '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035859 Validate Response body when sending a request with an empty Content-Type header = ' '\", function (){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_InvalidContent-String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035858 Validate Status Code: 415 Unsupported Media Type when sending a request with an invalid Content-Type header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035858 Validate Response body when sending a request with an invalid Content-Type header = 'abcdef'\", function (){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UMS_UpdateMetadataGroupById_InvalidContent-SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035860 Validate Status Code: 415 Unsupported Media Type when sending a request with an invalid Content-Type header = 'SELECT * FROM DATA'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035860 Validate Response body when sending a request with an invalid Content-Type header = 'SELECT * FROM DATA'\", function (){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let metadata_attribute = (\"a new attribute no. \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"metadata_attribute\", metadata_attribute);\r",
											"console.log(\"New generated custom attribute \" + metadata_attribute);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM DATA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"key\" : \"{{metadata_attribute}}\",\r\n        \"value\":\"true\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_DeleteMetadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"C2035874 Validate Status Code: 200 OK when a user deletes the meta data from a group \", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"C2035874 Validate Status Code: 200 when a user deletes the meta data from a group \", function(){\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"metadata\");\r",
											"    pm.expect(pm.response.json().metadata).to.be.empty;   \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"サクランボ\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_InexistentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035875 Validate Status Code: 404 Not Found when a user deletes the metadata from an inexistent group id= '01010101010' \", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035875 Validate response body when a user deletes the meta data from an inexisteng group id= '01010101010' \", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/01010101010/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"01010101010",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035876 Validate Status Code: 401 Unauthorized when sending a DELETE request without authorization token \", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035876 Validate response body  when sending a DELETE request without authorization token\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_Unauthorized_AuthHeader_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-186] C2035878 Validate Status Code: 401 Unauthorized when sending a DELETE request with an empty Authorization Header = ' ' \", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-186] C2035878 Validate response body when sending a DELETE request with an empty Authorization Header = ' '\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_Unauthorized_AuthHeader_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035877 Validate Status Code: 401 Unauthorized when sending a DELETE request with an invalid Authorization Header = 'abcdef' \", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035877 Validate response body when sending a DELETE request with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_Unauthorized_AuthHeader_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035879 Validate Status Code: 401 Unauthorized when sending a DELETE request with an invalid Authorization Header = 'SELECT * FROM DATA' \", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035879 Validate response body when sending a DELETE request with an invalid Authorization Header = 'SELECT * FROM DATA'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM DATA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/group/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"group",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_InvalidContent-Type_ogg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035880 Validate Status Code: 415 Unsupported Media Type when sending a DELETE request with an invalid Content-Type = 'application/ogg' \", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035880 Validate response body  when sending a DELETE request with an invalid Content-Type = 'application/ogg'\", function(){\r",
											"      pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/ogg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_InvalidContent-Type_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035882 Validate Status Code: 415 415 Unsupported Media Type when sending a DELETE request with an Empty Content-Type = ' ' \", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035882 Validate response body  when sending a DELETE request with an Empty Content-Type = ' '\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "    ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_InvalidContent-Type_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035881 Validate Status Code: 415 Unsupported Media Type when sending a DELETE request with an invalid Content-Type = 'abcdef' \", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035881 Validate response body  when sending a DELETE request with an invalid Content-Type = 'abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteMetadata_InvalidContent-Type_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035883 Validate Status Code: 415 Unsupported Media Type when sending a DELETE request with an invalid Content-Type = 'SELECT * FROM METADATA' \", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035883 Validate response body  when sending a DELETE request with an invalid Content-Type = 'SELECT * FROM METADATA'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM METADATA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n   \"a new attribute for subgroup no. 787215\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{metadata_group_id}}/metadata",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{metadata_group_id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UpdateGroup",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035936 Validate Status Code to be 200 OK when updating the type and description from a group\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035936 Validate response body to contain the updated type and description after updating\", function(){\r",
											"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
											"    pm.expect(pm.response.text()).to.not.contain(\"not valid\");\r",
											"    pm.expect(jsonData.enabled).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UpdateGroup_ChineseCharacters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description gēngxīn \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type 该软件的升级版 \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035948 Validate Status Code to be 200 OK when updating the type and description from a group\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035948 Validate response body to contain the updated type and description after updating\", function(){\r",
											"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
											"    pm.expect(pm.response.text()).to.not.contain(\"not valid\");\r",
											"    pm.expect(jsonData.enabled).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UpdateGroup_ArabicCharacters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description وصف التحديث \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type wasf al-tahdith \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035949 Validate Status Code to be 200 OK when updating the type and description from a group\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035949 Validate response body to contain the updated type and description after updating\", function(){\r",
											"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get(\"updateType\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"updateDescription\"));\r",
											"    pm.expect(pm.response.text()).to.not.contain(\"not valid\");\r",
											"    pm.expect(jsonData.enabled).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_InexistentGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035946 Validate Status Code to be 404 Not Found when updating the type and description from a group\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035946 Validate response body to contain the updated type and description after updating\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/30",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"30"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_InvalidDataType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035947 Validate Status Code to be 400 Bad Request when updating the type and description from a group\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035947 Validate response body to contain the updated type and description after updating\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/abcdef",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"abcdef"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UpdateGroup_zeroLengthType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035950 Validate Status Code to be 200 OK when updating the type and description from a group with a type length = 0\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035950 Validate response body to contain the updated type and description after updating with a type length = 0\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    pm.expect(jsonData.type).to.equal(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_50+LengthType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type for testing purposes: This should have a length longer than fifty characters to test if this will cause our test to fail or not. If this does not fail then this should be a bug, if this fails then it is clearly not a bug. Lets find it out... :) \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035952 Validate Status Code to be 400 Bad Request when updating the type and description from a group with a type length longer than 50 characters\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035952 Validate response body to contain the updated type and description after updating  with a type length longer than 50 characters\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"size must be between 0 and 50\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UpdateGroup_zeroLengthDescription",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035951 Validate Status Code to be 200 OK when updating the type and description from a group with a description length = 0\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035951 Validate response body to contain the updated type and description after updating with a description length = 0\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    pm.expect(jsonData.description).to.equal(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_200+LengthDescription",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);\r",
											"\r",
											"var updateDescription = (\"Update Description for testing purposes: This should have a length longer than two hundred and one characters to test if this will cause our test to fail or not. Lets find it ourselves using 200+ characters \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035953 Validate Status Code to be 400 Bad Request when updating the type and description from a group with a description attribute length longer than 200 characters\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035953 Validate response body to contain the updated type and description after updating with a description attribute length longer than 200 characters\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"size must be between 0 and 200\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035936 Validate Status Code to be 401 Unauthorized when updating the type and description from a group without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035936 Validate response body to contain the updated type and description after updating without Authorization Token\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_Unauthorized_empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-186] C2035939 Validate Status Code to be 401 Unauthorized when updating the type and description from a group with an empty Authorization Header='  '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-186] C2035939 Validate response body when updating the type and description from a group with an empty Authorization Header='  '\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_Unauthorized_string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035937 Validate Status Code to be 401 Unauthorized when updating the type and description from a group with an invalid Authorization Header='abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035937 Validate response body twhen updating the type and description from a group with an invalid Authorization Header='abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035940 Validate Status Code to be 401 Unauthorized when updating the type and description from a group with an invalid Authorization Header='SELECT * FROM METADATA'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035940 Validate response body when updating the type and description from a group with an invalid Authorization Header='SELECT * FROM METADATA'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM METADATA",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_InvalidContentType_soap+xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035941 Validate Status Code to be 415 Unsupported Media Type when updating the type and description from a group with an Invalid Content-Type Header = 'application/soap+xml'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035941 Validate response body when updating the type and description from a group with an Invalid Content-Type Header = 'application/soap+xml'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/soap+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_InvalidContentType_empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035944 Validate Status Code to be 415 Unsupported Media Type when updating the type and description from a group with an Invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035944 Validate response body when updating the type and description from a group with an Invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_InvalidContentType_string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035942 Validate Status Code to be 415 Unsupported Media Type when updating the type and description from a group with an Invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035942 Validate response body when updating the type and description from a group with an Invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateGroup_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var updateDescription = (\"Update Description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateDescription\", updateDescription);\r",
											"console.log(\"Update description \" + updateDescription);\r",
											"\r",
											"var updateType = (\"Update type  \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"updateType\", updateType);\r",
											"console.log(\"Update type \" + updateType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035943 Validate Status Code to be 415 Unsupported Media Type when updating the type and description from a group with an Invalid Content-Type Header = 'SELECT * FROM TYPE'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035943 Validate response body when updating the type and description from a group with an Invalid Content-Type Header = 'SELECT * FROM TYPE'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM TYPE",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"not valid\",\r\n    \"description\": \"{{updateDescription}}\",\r\n    \"type\": \"{{updateType}}\",\r\n    \"enabled\": false,\r\n    \"path\": \"not valid\",\r\n    \"metadata\": {\r\n        \"key1\": \"not valid\",\r\n        \"key3\": \"not valid\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/410",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"410"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_MoveOrganization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036950 Validate Status Code 400 Bad Request when moving a group\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"You can't move Organizations\");\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/groups/\" + pm.collectionVariables.get(\"testing_group_id\") + \"/move\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move?parentID={{parent_group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									],
									"query": [
										{
											"key": "parentID",
											"value": "{{parent_group_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_LongGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036951 Validate Status Code 400 Bad Request when moving a group with an very long id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/111111110202000000110/move?parentId={{parent_group_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"111111110202000000110",
										"move"
									],
									"query": [
										{
											"key": "parentId",
											"value": "{{parent_group_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_LongParentGroupId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036952 Validate Status Code 400 Bad Request when moving a group with an very long id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move?parentId=1234567891011121314151617181920",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									],
									"query": [
										{
											"key": "parentId",
											"value": "1234567891011121314151617181920"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036953 Validate Status Code 401 Unauthorized when updating a group's name without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_Unauthorized_empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[SP-3305] C2036954 Validate Status Code 401 Unauthorized when moving a group with an empty Authorization Header = '  '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_Unauthorized_string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036955 Validate Status Code 401 Unauthorized when moving a group with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036956 Validate Status Code 401 Unauthorized when moving a group with an invalid Authorization Header = 'SELECT * FROM KEY'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM KEY",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_InvalidContentType_xhtml+xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036957 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = 'application/xhtml+xml\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xhtml+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_InvalidContentType_empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036958 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = '   \", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_InvalidContentType_string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036959 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = 'abcdef\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_MoveGroup_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036960 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = 'SELECT * FROM GROUP_ID\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM GROUP_ID",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/move",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_RenameGroup",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036961 Validate Status Code 200 Ok when updating a group's name\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"group_rename\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_RenameGroup_Spanish",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Este grupo está en idioma Español \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group in Spanish\" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036962 Validate Status Code 200 Ok when updating a group's name in Spanish\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"group_rename\"));})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_RenameGroup_Russian",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Эта группа на русском языкеl \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group in языкеl\" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036963 Validate Status Code 200 Ok when updating a group's name in Russian\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"group_rename\"));\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_RenameGroup_Korean",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"이 그룹은 한국어로 되어있습니다 \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group in Korean \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036964 Validate Status Code 200 Ok when updating a group's name in Korean\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"group_rename\"));\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_InexistentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036965 Validate Status Code 404 Not Found when trying to update an inexistent group's name\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Group with id: \" + 111000 +  \" does not exist.\");\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/111000/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"111000",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_LongId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036966 Validate Status Code 400 Bad Request when trying to update a group's name with a very long id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1234567890123456789012345678901234567890/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1234567890123456789012345678901234567890",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_ZeroValue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036967 Validate Status Code 404 Not Found when trying to update a group's name with id=0\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Group with id: \"+ 0 + \" does not exist.\");\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/0/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"0",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036968 Validate Status Code 401 Unauthorized when updating a group's name without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_Unauthorized_empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[SP-3305] C2036970 Validate Status Code 401 Unauthorized when updating a group's name with an empty Authorization Header = '  '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_Unauthorized_string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036969 Validate Status Code 401 Unauthorized when updating a group's name with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036971 Validate Status Code 401 Unauthorized when updating a group's name with an invalid Authorization Header = 'SELECT * FROM NAME'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM NAME",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_InvalidContentType_atom+xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036972 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = 'application/atom+xml'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/atom+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_InvalidContentType_empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036973 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = '  '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "    ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_InvalidContentType_string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036974 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_RenameGroup_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var group_rename = (\"Rename a group \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"group_rename\", group_rename);\r",
											"console.log(\"Rename a group \" + group_rename);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036975 Validate Status Code 415 Unsupported Media Type when updating a group's name with an invalid Content-Type Header = 'SELECT * FROM GROUP_NAME'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM GROUP_NAME",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{group_rename}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/rename",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"rename"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/api/ums/admin/users",
					"item": [
						{
							"name": "E2E",
							"item": [
								{
									"name": "validateCreateGetUsersAndDelete",
									"item": [
										{
											"name": "Positive_CreateUser_WithoutGroupAssignation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735717 Validate Status Code: 400 Bad Request when creating a user without group assignation\", function(){\r",
															"    pm.response.to.have.status(400);\r",
															"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
															"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
															"    pm.expect(jsonData.status).to.equal(400);\r",
															"    pm.expect(jsonData.message).to.equal(\"Validation Failed.\");\r",
															"    pm.expect(jsonData.errors[0].field).to.equal(\"organizationId\");\r",
															"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"must not be null\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var new_user = (\"user created for testing \" + Math.floor((Math.random() * 1000000) + 1000000));\r",
															"pm.collectionVariables.set(\"new_user\", new_user);\r",
															"console.log(\"New generated user \" + new_user);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateParentGroup_AssignToNewUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735719 Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to creat a group to validate that a User can be assigned to a Group\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735719 Validate response body when sending a POST request with a valid JSON request Body to create a group for testing that a User can be assigned to a Group\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"testing_group\"));\r",
															"    pm.collectionVariables.set(\"testing_group_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var testing_group = (\"create a group for testing \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"testing_group\", testing_group);\r",
															"console.log(\"New testing group \" + testing_group);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"{{testing_group}}\",\r\n    \"description\" : \"Group Created for Testing\",\r\n    \"type\" : \"Org\",\r\n    \"enabled\" : true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateSubgroup_AssignToNewUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\" Validate Status Code: 201 Created when sending a POST request with a valid JSON Request Body to create a subgroup to validate that a User can be assigned to a subroup\", function() {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\" Validate response body when sending a POST request with a valid JSON request Body to create a subgroup for testing that a User can be assigned to a subroup\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"subgroup\"));\r",
															"    pm.collectionVariables.set(\"subgroup_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{subgroup}}\",\r\n    \"description\": \"Group created to be a subgroup and to have users assigned to it\",\r\n    \"type\": \"Org\",\r\n    \"enabled\": true,\r\n    \"parentId\": \"{{testing_group_id}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/groups",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateUser_AssignToParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C735718 Validate Status Code: 201 Created when creating a user sending a valid request body\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C735718 Validate Response body has correct username\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get('new_user_group'));\r",
															"    pm.expect(jsonData.organizationId).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"    pm.collectionVariables.set(\"new_user_group_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var new_user_group = (\"user created for testing assigned to a group \" + Math.floor((Math.random() * 1000000) + 1000000));\r",
															"pm.collectionVariables.set(\"new_user_group\", new_user_group);\r",
															"console.log(\"New generated user assigned to a group\" + new_user_group);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{new_user_group}}\",\r\n    \"organizationId\": \"{{testing_group_id}}\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetUser_ById_ParentGroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C736500 Validate Status Code: 200 OK when searching for a created username that has been assigned to a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C736500 Validate that the response body is returning the correct data related to the new created username\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"new_user_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"new_user_group\"));\r",
															"    pm.expect(jsonData.organizationId).to.equal(pm.collectionVariables.get(\"testing_group_id\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_UpdateUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2038327 Validate Status Code: 200 OK when searching for a created username that has been assigned to a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-225] C2038328 Validate that the response body is returning the correct data related to the new created username\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"new_user_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"new_name\"));\r",
															"    pm.expect(jsonData.organizationId).to.equal(pm.collectionVariables.get(\"new_orgId\"));\r",
															"    pm.expect(jsonData.sptUserId).to.equal(pm.collectionVariables.get(\"new_sptId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var new_name = (\"new name \" + Math.floor((Math.random() * 1000000) + 1000000));\r",
															"pm.collectionVariables.set(\"new_name\", new_name);\r",
															"console.log(\"New name \" + new_name);\r",
															"\r",
															"var new_orgId = Math.floor((Math.random() * 1000000) + 1000000);\r",
															"pm.collectionVariables.set(\"new_orgId\", new_orgId);\r",
															"console.log(\"New orgId \" + new_orgId);\r",
															"\r",
															"var new_sptId = Math.floor((Math.random() * 1000000) + 1000000);\r",
															"pm.collectionVariables.set(\"new_sptId\", new_sptId);\r",
															"console.log(\"New sptUserId \" + new_sptId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{new_name}}\",\r\n    \"organizationId\": \"{{new_orgId}}\",\r\n    \"sptUserId\": \"{{new_sptId}}\"\r\n}"
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetUpdateUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C2038329 Validate Status Code: 200 OK when searching for a created username that has been assigned to a group\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-225] C2038330 Validate that the response body is returning the correct data related to the new created username\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"new_user_group_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"new_name\"));\r",
															"    pm.expect(jsonData.organizationId).to.equal(pm.collectionVariables.get(\"new_orgId\"));\r",
															"    pm.expect(jsonData.sptUserId).to.equal(pm.collectionVariables.get(\"new_sptId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_group_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_group_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_CreateUser_AssignToSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C736498 Validate Status Code: 201 Created when creating a user and validate it has been assigned to the correct subgroup\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"C736498 Validate Response body has correct username assigned to the correct subgroup\", function(){\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get('new_user_subgroup'));\r",
															"    pm.expect(jsonData.organizationId).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"    pm.collectionVariables.set(\"new_user_subgroup_id\", jsonData.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var new_user_subgroup = (\"user created for testing assigned to a subgroup \" + Math.floor((Math.random() * 1000000) + 1000000));\r",
															"pm.collectionVariables.set(\"new_user_subgroup\", new_user_subgroup);\r",
															"console.log(\"New generated user assigned to a subgroup\" + new_user_subgroup);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{new_user_subgroup}}\",\r\n    \"organizationId\": \"{{subgroup_id}}\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_RemoveUserFromSubgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Validate Status Code: 204 No Content when removing a user from a group\", function(){\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetUser_ById_Subgroup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"C736501 Validate Status Code: 200 OK when searching for a created username that has been assigned to a subgroup\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C736501 Validate that the response body is returning the correct data related to the new created username\", function(){\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"new_user_subgroup_id\"));\r",
															"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get(\"new_user_subgroup\"));\r",
															"    pm.expect(jsonData.organizationId).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_subgroup_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users",
														"{{new_user_subgroup_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetUsers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let resp = pm.response.json();\r",
															"\r",
															"pm.test(\"C736497 Status Code : 200 When I send a GET request to get all users \", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-200] C736497 Validate response body to have the userId and name when it is not assigned to an organizationId\", function(){\r",
															"    for(let r in resp){\r",
															"        if (resp[r].id === pm.collectionVariables.get(\"new_user_id\")){\r",
															"            pm.expect(resp[r].id).to.equal(pm.collectionVariables.get(\"new_user_id\"));\r",
															"            pm.expect(resp[r].name).to.equal(pm.collectionVariables.get(\"new_user\"));\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test.skip(\"[UMS-225] C736497 Validate response body to have the userId and name when assigned to an organizationId from a group\", function(){\r",
															"        for(let r in resp){\r",
															"        if(resp[r].id===pm.collectionVariables.get(\"new_user_group_id\")){\r",
															"            pm.expect(resp[r].id).to.equal(pm.collectionVariables.get(\"new_user_group_id\"));\r",
															"            pm.expect(resp[r].name).to.equal(pm.collectionVariables.get(\"new_name\"));\r",
															"            pm.expect(resp[r].organizationId).to.equal(pm.collectionVariables.get(\"new_orgId\"));\r",
															"            pm.expect(resp[r].sptUserId).to.equal(pm.collectionVariables.get(\"new_sptId\"));\r",
															"        }\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C736497 Validate response body to have the userId and name when assigned to an organizationId from a subgroup\", function(){\r",
															"        for(let r in resp){\r",
															"        if(resp[r].id===pm.collectionVariables.get(\"new_user_subgroup_id\")){\r",
															"            pm.expect(resp[r].id).to.equal(pm.collectionVariables.get(\"new_user_subgroup_id\"));\r",
															"            pm.expect(resp[r].name).to.equal(pm.collectionVariables.get(\"new_user_subgroup\"));\r",
															"            pm.expect(resp[r].organizationId).to.equal(pm.collectionVariables.get(\"subgroup_id\"));\r",
															"        }\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/users",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"users"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Negative_DeleteUserFromGroup_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036031 Status Code : 415 Unsupported Media Type when a user to be deleted from a group sending an Invalid Content-type header = 'SELECT * FROM SPTUSERID'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"C2036031 Validate response body when sending a DELETE request to remove a user from a group sending an Invalid Content-type header = 'SELECT * FROM SPTUSERID'\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"new_user_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM SPTUSERID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036030 Status Code : 415 Unsupported Media Type when a user to be deleted from a group sending an Invalid Content-type header = 'abcedf'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"C2036030 Validate response body when sending a DELETE request to remove a user from a group sending an Invalid Content-type header = 'abcdef'\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"new_user_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_InvalidContentType_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036029 Status Code : 415 Unsupported Media Type when a user to be deleted from a group sending an empty Content-type header = ' '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"C2036029 Validate response body when sending a DELETE request to remove a user from a group sending an empty Content-type header = '  '\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"new_user_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_InvalidContentType_xml-dtd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036028 Status Code : 415 Unsupported Media Type when a user to be deleted from a group sending an Invalid Content-type header = 'application/xml-dtd'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"C2036028 Validate response body when sending a DELETE request to remove a user from a group sending an Invalid Content-type header = 'application/xml-dtd'\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"testing_group_id\"));\r",
											"    pm.expect(jsonData.path).to.contain(pm.collectionVariables.get(\"new_user_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml-dtd",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036027 Status Code : 401 Unauthorized when a user to be deleted from a group with an invalid Authorization header='SELECT * FROM USER_ID'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036027 Validate response body when sending a DELETE request to remove a user from a group  with an invalid Authorization header='SELECT * FROM USER_ID'\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM USER_ID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_Unauthorized_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036026 Status Code : 401 Unauthorized when a user to be deleted from a group with an invalid Authorization header='abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036026 Validate response body when sending a DELETE request to remove a user from a group  with an invalid Authorization header='abcdef'\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_Unauthorized_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-186] C2036024 Status Code : 401 Unauthorized when a user to be deleted from a group with an empty Authorization header='  '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-186] C2036024 Validate response body when sending a DELETE request to remove a user from a group  with an empty Authorization header='  '\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036023 Status Code : 401 Unauthorized when a user to be deleted from a group without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036023 Validate response body when sending a DELETE request to remove a user from a group without Authorization Token\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_LongGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036022 Status Code : 400 Not Found when sending a DELETE request to when sending a long group id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036022 Validate response body when sending a DELETE request when sending a group id\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.path).to.contain(\"1000000011100000000\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/1000000011100000000/users/{{new_user}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"1000000011100000000",
										"users",
										"{{new_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_LongUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036021 Status Code : 400 Not Found when sending a DELETE request to when sending a long user id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036021 Validate response body when sending a DELETE request to remove an inexistent user from an existing group\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.path).to.contain(\"0110001100000000111111\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/0110001100000000111111",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"0110001100000000111111"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_UserIdZero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036025 Status Code : 404 Not Found when sending a DELETE request to remove an a user with id= 0 from an existing group\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036025 Validate response body when sending a DELETE request to remove an inexistent user from an existing group\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.message).to.contain(\"does not exist\");\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/0",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_InexistentUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036020 Status Code : 404 Not Found when sending a DELETE request to remove an inexistent user from an existing group\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036020 Validate response body when sending a DELETE request to remove an inexistent user from an existing group\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.message).to.contain(\"does not exist\");\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/{{testing_group_id}}/users/3000000",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"{{testing_group_id}}",
										"users",
										"3000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUserFromGroup_InexistentGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2036019 Status Code : 404 Not Found when sending a DELETE request to remove a user from an inexistent group\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"C2036019 Validate response body when sending a DELETE request to remove a user from an inexistent group\", function(){\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.message).to.contain(\"does not exist\");\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/groups/30/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"groups",
										"30",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_CreateUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test.skip(\"[UMS-200] C773225 Validate Status Code: 201 Created when creating a user sending a valid request body\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-200] C773225 Validate Response body has correct username\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
											"    pm.expect(jsonData.name).to.equal(pm.collectionVariables.get('new_user'));\r",
											"    pm.collectionVariables.set(\"new_user_id\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\":0,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_EmptyRequestBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C952141 Validate Status Code: 400 Bad Request when creating a user sending an empty request body\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C952141 Validate Response body when creating a user sending an empty request body\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C1560592 Validate Status Code: 400 Bad Request when creating a user with name containg special characters ='My n@m3 $h0ulDN/t b# v+lid w#eN u$!n& $p%C!4l C#&r&c+3r}'\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C1560592 Validate Response body when creating a user with name containg special characters ='My n@m3 $h0ulDN/t b# v+lid w#eN u$!n& $p%C!4l C#&r&c+3r}'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"My n@m3 $h0ulDN/t b# v+lid w#eN u$!n& $p%C!4l C#&r&c+3r}\",\r\n    \"sptUserId\":1,\r\n    \r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_NoOrganizationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038297 Validate Status Code: 400 Bad Request when trying to create a user without Organization Id'\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"C2038298 Validate Response body when creating a user without organizationId\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Validation Failed.\");\r",
											"    pm.expect(jsonData.errors[0].field).to.equal(\"organizationId\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"must not be null\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"User without Org Id\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_OrganizationId_null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038299 Validate Status Code: 400 Bad Request when trying to create a user without Organization Id'\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"C2038300 Validate Response body when creating a user without organizationId\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Validation Failed.\");\r",
											"    pm.expect(jsonData.errors[0].field).to.equal(\"organizationId\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"must not be null\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"User without Org Id\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\": null,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_LongString",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-200] C735681 Validate Status Code: 400 Bad Request when creating a user with name ='long name'\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-200] C735681 Validate Response body when creating a user with name ='long name'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"size must be between 0 and 100\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"a very very very very long long long long name to test that a user cannot have a very very very very very very very long long long long long name with too many characters because this couuld cause conflict in the future so we should restrict the amount of characters allowed in a username. It does not make sense to allow someone to have a very long name like this............testing\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C1740272 Validate Status Code: 400 Bad Request when creating a user with name = null\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C1740272 Validate Response body when creating a user with name = null\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"must not be null\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": null,\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-200] C1754844 Validate Status Code: 201 Created when creating a user with name = 12345\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-200] C1754844 Validate Response body when creating a user with name = 12345\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": 12345,\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_EmptyName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C1775412 Validate Status Code: 400 Bad Request when creating a user with an empty name=''\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C1775412 Validate Response body when creating a user with an empty name =''\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C1783799 Validate Status Code: 401 Unauthorized when sending a request to create a user without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C1783799 Validate Response body  when sending a request to create a user without Authorization Token\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_Unauthorized_InvalidAuthToken_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C1796962 Validate Status Code: 401 Unauthorized when sending an invalid authorization header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C1796962 Validate Response body  when sending an invalid authorization header = 'abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_Unauthorized_InvalidAuthToken_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-3310] C1800299 Validate Status Code: 401 Unauthorized when sending an empty Authorization header =' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-3310] C1800299 Validate Response body when sending an empty Authorization header =' '\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_Unauthorized_InvalidAuthToken_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C1805990 Validate Status Code: 401 Unauthorized when creating a user without an invalid authorization header = 'SELECT * FROM USER'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C1805990 Validate Response body when creating a user without an invalid authorization header = 'SELECT * FROM USER'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM USER",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"enabled\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_InvalidContentType_octet-stream",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C1808639 Validate Status Code: 415 Unsupported Media Type when sending an Invalid Content-Type Header='octet-stream'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C1808639 Validate Response body when sending an Invalid Content-Type Header='octet-stream'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C1815988 Validate Status Code: 415 Unsupported Media Type when sending an empty Content-Type Header='  '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C1815988 Validate Response body when sending an Invalid Content-Type Header='  '\", function(){\r",
											"   let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C1812623 Validate Status Code: 415 Unsupported Media Type when sending an Invalid Content-Type Header='abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C1812623 Validate Response body when sending an Invalid Content-Type Header='abcdef'\", function(){\r",
											"   let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateUser_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C1817798 Validate Status Code: 415 Unsupported Media Type when sending an Invalid Content-Type Header='SELECT * FROM USERNAME'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C1817798 Validate Response body when sending an Invalid Content-Type Header='SELECT * FROM USERNAME'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM USERNAME",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetUser_ById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C773224 Validate Status Code : 200 OK when sending a GET request to search a user by Id\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C773224 Validate Response body when searching a user by its id\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    pm.expect(jsonData.id.toString()).to.equal(pm.collectionVariables.get(\"user_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_LongId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035789 Validate Status Code : 400 Bad Request when sending a GET request to search a user by Id sending a long id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035789 Validate Response body when searching a user by its id sending a long id\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/12345678912345678912",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"12345678912345678912"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035794 Validate Status Code : 400 Bad Request when sending a GET request to search a user by Id sending special characters = '*[}´/%#' as id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035794 Validate Response body when searching a user by its id sending special characters = '*[}´/%#' as id\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/*[}´/%#",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"*[}´",
										"%"
									],
									"hash": ""
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035795 Validate Status Code : 400 Bad Request when sending a GET request to search a user by Id sending a string ='abcdef' as id \", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035795 Validate Response body when searching a user by its id sending a string as id = 'abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/abcdef",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"abcdef"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035785 Validate Status Code : 401 Unauthorized when sending a GET request to search a user by Id without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035785 Validate Response body when searching a user by its id without Authorization Token\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_Unauthorized_InvalidAuthToken_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035786 Validate Status Code : 401 Unauthorized when sending a GET request to search a user by Id with an invalid Authorization Header ='abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035786 Validate Response body when searching a user by its id with an invalid Authorization Header ='abcdef'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_Unauthorized_InvalidAuthToken_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035788 Validate Status Code : 401 Unauthorized when sending a GET request to search a user by Id with an invalid Authorization Header ='SELECT * FROM USERS'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035788 Validate Response body when searching a user by its id with an invalid Authorization Header ='SELECT * FROM USERS'\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT * FROM USERS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_Unauthorized_InvalidAuthToken_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-187] C2035787 Validate Status Code : 401 Unauthorized when sending a GET request to search a user by Id with an empty Authorization Header = ' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C2035787 Validate Response body when searching a user by its id with an empty Authorization Header = ' '\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_InvalidContentType_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035790 C2035790 Validate Status Code: 415 Unsupported Media Type when sending an Invalid Content-Type Header ='application/pdf'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035790 Validate response body when sending Invalid Content-Type Header ='application/pdf'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/pdf",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035791 Validate Status Code: 415 Unsupported Media Type when sending an Invalid Content-Type Header ='abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035791 Validate response body when sending Invalid Content-Type Header ='abcdef'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_InvalidContentType_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035792 Validate Status Code: 415 Unsupported Media Type when sending an Invalid Content-Type Header ='abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035792 Validate response body when sending Invalid Content-Type Header ='abcdef'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_ById_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035793 Validate Status Code: 415 Unsupported Media Type when sending an Invalid Content-Type Header ='SELECT * FROM NAME'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035793 Validate response body when sending Invalid Content-Type Header ='SELECT * FROM NAME'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM NAME",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetUser_AllUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C773223 Validate Status Code: 200 OK when sending a GET request to retrieve all users\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"C773223 Validate response body when sending a GET request to retrieve all users\", function(){\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    for(let j in jsonData){\r",
											"        pm.expect(jsonData[j]).to.haveOwnProperty(\"id\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035927 Validate Status Code: 401 Unauthorized when sending a GET request to retrieve all users without authorization token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035927 Validate response body when sending a GET request to retrieve all users without authorization token \", function(){\r",
											"        pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_Unauthorized_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035928 Validate Status Code: 401 Unauthorized when sending a GET request to retrieve all users with an invalid authorization header= 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035928 Validate response body when sending a GET request to retrieve all users with an invalid authorization header= 'abcdef'\", function(){\r",
											"        pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2035930 Validate Status Code: 401 Unauthorized when sending a GET request to retrieve all users with an invalid authorization header= 'SELECT * FROM USERS'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035930 Validate response body when sending a GET request to retrieve all users with an invalid authorization header= 'SELECT * FROM USERS'\", function(){\r",
											"        pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM USERS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_Unauthorized_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-187] C2035929 Validate Status Code: 401 Unauthorized when sending a GET request to retrieve all users with an empty authorization header= '  '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"[UMS-187] C2035929 Validate response body when sending a GET request to retrieve all users with an empty authorization header= '  '\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"        pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"        pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_InvalidContentTypeHeader_zip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035934 Validate Status Code: 415 Unsupported Media Type when sending a GET request to retrieve all users with an invalid Content-Type header= 'application/zip'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035934 Validate response body when sending a GET request to retrieve all users with an invalid Content-type header= 'application/zip'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"        pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/zip",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_InvalidContentTypeHeader_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035932 Validate Status Code: 415 Unsupported Media Type when sending a GET request to retrieve all users with an empty Content-Type header= '  '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035932 Validate response body when sending a GET request to retrieve all users with an empty Content-type header= '  '\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"        pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_InvalidContentTypeHeader_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035931 Validate Status Code: 415 Unsupported Media Type when sending a GET request to retrieve all users with an invalid Content-Type header= 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035931 Validate response body when sending a GET request to retrieve all users with an invalid Content-type header= 'abcdef'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"        pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetUser_AllUsers_InvalidContentTypeHeader_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2035933 Validate Status Code: 415 Unsupported Media Type when sending a GET request to retrieve all users with an invalid Content-Type header= 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"C2035933 Validate response body when sending a GET request to retrieve all users with an invalid Content-type header= 'abcdef'\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"        pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"        pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM USERNAME",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_DeleteUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038316 Validate Status Code : 204 No Content when deleting an existing user\", function(){\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.expect(pm.response.status).to.equal(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_DeleteUser_DeleteDeletedUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[UMS-226] C2038317 Validate Status Code : 404 No Content when deleting a deleted user\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_InexistentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038318 Validate Status Code : 400 Bad Request when trying to delete an inexistent user\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/123456789123456767755",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"123456789123456767755"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038319 Validate Status Code : 401 Unauthorized when trying to delete a user without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_Unauthorized_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[SP-3305] C2038320 Validate Status Code : 401 Unauthorized when trying to delete a user with an empty Authorization Header= ' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_Unauthorized_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038321 Validate Status Code : 401 Unauthorized when trying to delete a user with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038322 Validate Status Code : 401 Unauthorized when trying to delete a user with an invalid Authorization Header = 'SELECT * FROM USER_ID'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM USER_ID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_InvalidContentType_zip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038323 Validate Status Code : 415 Unsupported Media Type when trying to delete a user with an invalid Content-Type Header = 'application/pdf'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/pdf",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_InvalidContentType_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[SP-3310] C2038324 Validate Status Code : 415 Unsupported Media Type when trying to delete a user with an invalid Content-Type Header = 'application/pdf'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}/groups",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_InvalidContentType_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038325 Validate Status Code : 415 Unsupported Media Type when trying to delete a user with an invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_DeleteUser_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038326 Validate Status Code : 415 Unsupported Media Type when trying to delete a user with an invalid Authorization Header = 'SELECT * FROM ID'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM ID",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{new_user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{new_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_LongUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038301 Validate Status Code: 400 Bad Request when sending a long user id\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"a name\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/123456789012345678921",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"123456789012345678921"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_InexistentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test.skip(\"[UMS-224] C2038302 Validate Status Code: 400 Bad Request User Id cannot be deleted\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Validation Failed.\");\r",
											"    pm.expect(jsonData.errors[0].field).to.equal(\"organizationId\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"must not be null\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"a name\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/1110011101010112342",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"1110011101010112342"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_IdZero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test.skip(\"[UMS-224] C2038303 Validate Status Code: 404 Not Found when sending a long user id\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"a name\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/0",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_DeleteOrganizationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038304 Validate Status Code: 400 Bad Request User Id cannot be deleted\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Validation Failed.\");\r",
											"    pm.expect(jsonData.errors[0].field).to.equal(\"organizationId\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"must not be null\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_DeleteSPTUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038305 Validate Status Code: 400 Bad Request spt User Id cannot be deleted\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Validation Failed.\");\r",
											"    pm.expect(jsonData.errors[0].field).to.equal(\"sptUserId\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"must not be null\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{new_user}}\",\r\n    \"sptUserId\":\"\",\r\n    \"organizationId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_DeleteName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038306 Validate Status Code: 400 Bad Request name cannot be deleted\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.message).to.equal(\"Validation Failed.\");\r",
											"    pm.expect(jsonData.errors[0].field).to.equal(\"name\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.contain(\"must match \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"sptUserId\":1,\r\n    \"organizationId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_EmptyBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038307 Validate Status Code: 400 Bad Request with an empty request body\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038308 Validate Status Code: 401 Unauthorized when sending a PUT request without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_Unauthorized_Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[SP-3305] C2038309 Validate Status Code: 401 Unauthorized when sending a PUT request with empty Authorization Header = ' '\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "    ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_Unauthorized_String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038310 Validate Status Code: 401 Unauthorized when sending a PUT request with invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038311 Validate Status Code: 401 Unauthorized when sending a PUT request with invalid Authorization Header = 'SELECT * FROM USER_NAME'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM USER_NAME",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_InvalidContentType_atom+xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038312 Validate Status Code: 415 Unsupported Media Type when sending a PUT request with invalid Content-Type Header = 'application/atom+xml'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/atom+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_InvalidContentType_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038313 Validate Status Code: 415 Unsupported Media Type when sending a PUT request with empty Content-Type Header = ' '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_InvalidContentType_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038314 Validate Status Code: 415 Unsupported Media Type when sending a PUT request with empty Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateUser_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"C2038315 Validate Status Code: 415 Unsupported Media Type when sending a PUT request with empty Content-Type Header = 'SELECT * FROM NAMES'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM NAMES",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/users/{{user_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/api/ums/admin/metadata/keys",
					"item": [
						{
							"name": "E2E",
							"item": [
								{
									"name": "validateCatalogueOfCustomAttributes",
									"item": [
										{
											"name": "Positive_CreateAtrributesForUpdating",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2038417 Validate Status Code 201 Created when I submit a request to create a new key\", function(){\r",
															"    pm.response.to.have.status(201);\r",
															"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"newAttribute_id\", jsonData.id);\r",
															"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let key = (\"key \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"key\", key);\r",
															"console.log(\"key \" + key);\r",
															"\r",
															"let description = (\"description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"description\", description);\r",
															"console.log(\"description \" + description);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"key\": \"{{key}}\",\r\n    \"description\": \"{{description}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"metadata",
														"keys"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetCreatedAttributeById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2038418 Validate Status Code 200 OK When searching for a previously created Custom Attribute by its ID\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"newAttribute_id\"));\r",
															"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"metadata",
														"keys",
														"{{newAttribute_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_UpdateCreatedAttribute",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2038419 Validate Status Code 200 OK when updating the value of an existing custom attribute\", function(){\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"newAttribute_id\"));\r",
															"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description_updated\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let description_updated = (\"description_updated \" + Math.floor((Math.random() * 1000000) + 1000));\r",
															"pm.collectionVariables.set(\"description_updated\", description_updated);\r",
															"console.log(\"description_updated \" + description_updated);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"key\": \"{{key}}\",\r\n    \"description\": \"{{description_updated}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"metadata",
														"keys"
													]
												}
											},
											"response": []
										},
										{
											"name": "Positive_GetUpdateAttribute",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C2038420 Validate Status Code 200 OK When searching for a previously created Custom Attribute by its ID\", function(){\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
															"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"newAttribute_id\"));\r",
															"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
															"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description_updated\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "tokenType",
															"value": "",
															"type": "string"
														},
														{
															"key": "accessToken",
															"value": "{{admin_token_bu1}}",
															"type": "string"
														},
														{
															"key": "headerPrefix",
															"value": "",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"type": "any"
														},
														{
															"key": "callBackUrl",
															"type": "any"
														},
														{
															"key": "authUrl",
															"type": "any"
														},
														{
															"key": "accessTokenUrl",
															"type": "any"
														},
														{
															"key": "clientId",
															"type": "any"
														},
														{
															"key": "clientSecret",
															"type": "any"
														},
														{
															"key": "clientAuth",
															"type": "any"
														},
														{
															"key": "grantType",
															"type": "any"
														},
														{
															"key": "scope",
															"type": "any"
														},
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "redirectUri",
															"type": "any"
														},
														{
															"key": "refreshToken",
															"type": "any"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
													"host": [
														"{{platform_url}}"
													],
													"path": [
														"api",
														"ums",
														"admin",
														"metadata",
														"keys",
														"{{newAttribute_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Positive_CreateAtrributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038399 Validate Status Code 201 Created when I submit a request to create new metadata\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.expect(pm.response.status).to.equal(\"Created\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"newAttribute_id\", jsonData.id);\r",
											"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let key = (\"key \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"key\", key);\r",
											"console.log(\"key \" + key);\r",
											"\r",
											"let description = (\"description \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"description\", description);\r",
											"console.log(\"description \" + description);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"{{key}}\",\r\n    \"description\": \"{{description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_Duplicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037951 Validate Status Code 400 Bad Request when I submit a request to create a duplicated key\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Key already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"{{key}}\",\r\n    \"description\": \"{{description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_EmptyRequestBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037952 Validate Status Code 400 Bad Request when I submit a request with an empty request body to create new custom Attributes\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_LongKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037953 Validate Status Code 400 Bad Request when I submit a request to create new metadata with a key attribute of 201 characters\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"size must be between 0 and 200\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"This text has many characters. This is actually making sure that the Key attribute can be no longer than 201 characters long. The size limit is anything between 0 and 200 characters long. Let's test it\",\r\n    \"description\": 1234\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_LongDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037954 Validate Status Code 400 Bad Request when I submit a request to create new metadata with a description attribute of 201 characters\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.errors[0].errorMessage).to.equal(\"size must be between 0 and 200\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"myKey\",\r\n    \"description\": \"This text has many characters. This is actually making sure that the Key attribute can be no longer than 201 characters long. The size limit is anything between 0 and 200 characters long. Let's test it\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_LongKeyAndDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037955 Validate Status Code 400 Bad Request when I submit a request to create new metadata with key and description attributes with a length over 201 characters\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    let errors = pm.response.json().errors;\r",
											"    let errorArr = [];\r",
											"    for(let e in errors){\r",
											"        pm.expect(jsonData.errors[e].errorMessage).to.equal(\"size must be between 0 and 200\");\r",
											"        errorArr.push(jsonData.errors[e].field);\r",
											"    }\r",
											"    pm.expect(errorArr.length).to.equal(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"This text has many characters. This is actually making sure that the Key attribute can be no longer than 201 characters long. The size limit is anything between 0 and 200 characters long. Let's test it\",\r\n    \"description\": \"This text has many characters. This is actually making sure that the Key attribute can be no longer than 201 characters long. The size limit is anything between 0 and 200 characters long. Let's test it\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_nullValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let errors = jsonData.errors;\r",
											"let errorArr= [];\r",
											"\r",
											"pm.test(\"C2037977 Validate Status Code 400 Bad Request when I submit a request to create new metadata with null values in key and description\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    for(let e in errors){\r",
											"        pm.expect(jsonData.errors[e].errorMessage).to.contain(\"must not be null\");\r",
											"        errorArr.push(jsonData.errors[e].field);\r",
											"    }\r",
											"    pm.expect(errorArr.length).to.equal(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": null,\r\n    \"description\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_ZeroCharLongKeyAndDescritpion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let errors = jsonData.errors;\r",
											"let errorArr= [];\r",
											"\r",
											"pm.test(\"C2037956 Validate Status Code 400 Bad Request when I submit a request to create new metadata key and description with a length of 0 characters\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    for(let e in errors){\r",
											"        pm.expect(jsonData.errors[e].errorMessage).to.contain(\"must match\");\r",
											"        errorArr.push(jsonData.errors[e].field);\r",
											"    }\r",
											"    pm.expect(errorArr.length).to.equal(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"\",\r\n    \"description\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037943 Validate Status Code 401 Unauthorized when I submit a request to create new metadata without authorization token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_Unauthorized_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[SP-3305] C2037944 Validate Status Code 401 Unauthorized when I submit a request to create sending an empty Authorization Header = ' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "     ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_Unauthorized_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037945 Validate Status Code 401 Unauthorized when I submit a request to create sending an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037946 Validate Status Code 401 Unauthorized when I submit a request to create sending an invalid Authorization Header = 'SELECT * FROM KEYS'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM KEYS",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_InvalidContentType_zip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037950 Validate Status Code 415 Unsupported Media Type when I submit a request to create sending an invalid Content-Type Header = 'application/zip'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/zip",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_InvalidContentType_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037947 Validate Status Code 415 Unsupported Media Type when I submit a request to create sending an invalid Content-Type Header = '  '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_InvalidContentType_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037948 Validate Status Code 415 Unsupported Media Type when I submit a request to create sending an invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_CreateAtrributes_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2037949 Validate Status Code 415 Unsupported Media Type when I submit a request to create sending an invalid Content-Type Header = 'SELECT* FROM KEY'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT* FROM KEY",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"a value\",\r\n    \"description\": \"Some key\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetAttributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038389 Validate Status Code 200 when I submit a GET request to retrieve existing Attributes\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"C2038390 Validate response body has the correct structure\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData._embedded.keys.length).to.equal(jsonData.page.size);\r",
											"    for(let l in jsonData._links){\r",
											"        pm.expect(jsonData._links[l].href).to.contain(\"/api/ums/admin/metadata/keys\");\r",
											"    }\r",
											"    for(let [key, value] of Object.entries(jsonData.page.size)){\r",
											"        pm.expect(key).to.equal(pm.collectionVariables.get(\"size\"));\r",
											"        pm.expect(value).to.equal(pm.collectionVariables.get(\"20\"));\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038391 Validate Status Code 401 when I submit a GET request to retrieve existing Attributes without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_Unauthorized_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038392 Validate Status Code 401 when I submit a GET request to retrieve existing Attributes with an invalid Authorization Header= '  '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(\"UNAUTHORIZED\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Empty OAUTH Token.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_Unauthorized_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038393 Validate Status Code 401 when I submit a GET request to retrieve existing Attributes with an invalid Authorization Header= 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038394 Validate Status Code 401 when I submit a GET request to retrieve existing Attributes with an invalid Authorization Header= 'SELECT * FROM KEYS'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM KEYS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_InvalidContent-Type_vnd.api+json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038395 Validate Status Code 415 when I submit a GET request to retrieve existing Attributes with an invalid Authorization Header= 'application/vnd.api+json'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_InvalidContent-Type_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038396 Validate Status Code 415 when I submit a GET request to retrieve existing Attributes with an invalid Authorization Header= 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_InvalidContent-Type_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038397 Validate Status Code 415 when I submit a GET request to retrieve existing Attributes with an invalid Authorization Header= '  '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "    ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributes_InvalidContent-Type_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038398 Validate Status Code 415 when I submit a GET request to retrieve existing Attributes with an invalid Authorization Header= 'SELECT * FROM METADATA'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "SELECT * FROM METADATA",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_UpdateAttributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038400 Validate Status Code 200 OK when updating the value of an existing custom attribute\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(pm.collectionVariables.get(\"newAttribute_id\"));\r",
											"    pm.expect(jsonData.key).to.equal(pm.collectionVariables.get(\"key\"));\r",
											"    pm.expect(jsonData.description).to.equal(pm.collectionVariables.get(\"description_updated\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let key_updated = (\"key \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"key_updated\", key_updated);\r",
											"console.log(\"key_updated \" + key_updated);\r",
											"\r",
											"let description_updated = (\"description_updated \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"description_updated\", description_updated);\r",
											"console.log(\"description_updated \" + description_updated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"{{key}}\",\r\n    \"description\": \"{{description_updated}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_UpdateKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038403 Validate Status Code 404 when trying to update a key\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.message).to.equal(\"Key doesn't exist\");\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let key_updated = (\"key \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"key_updated\", key_updated);\r",
											"console.log(\"key_updated \" + key_updated);\r",
											"\r",
											"let description_updated = (\"description_updated \" + Math.floor((Math.random() * 1000000) + 1000));\r",
											"pm.collectionVariables.set(\"description_updated\", description_updated);\r",
											"console.log(\"description_updated \" + description_updated);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"{{key_updated}}\",\r\n    \"description\": \"{{description_updated}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateInexistentKeyAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038404 Validate Status Code 404 Not Found when updating the value of an existing custom attribute\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Key doesn't exist\");\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"key\": \"inexistent key\",\r\n  \"description\": \"Updated\",\r\n  \"enabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_EmptyRequestBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038405 Validate Status Code 400 Bad Request when sending an empty request body of an existing custom attribute\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_EmptyKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038406 Validate Status Code 400 Bad Request when updating the value of an empty key from a custom attribute\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"    pm.expect(jsonData.errors[0].field).to.contain(\"key\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"\", \r\n    \"description\": \"{{description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_EmptyDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038407 Validate Status Code 400 Bad Request when updating the value of an existing custom attribute\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"    pm.expect(jsonData.errors[0].field).to.contain(\"description\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"{{key}}\", \r\n    \"description\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_EmptyKeyAndDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038408 Validate Status Code 400 Bad Request when updating the value of an existing custom attribute\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"\", \r\n    \"description\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038409 Validate Status Code 401 Unauthorizad when updating the value of an existing custom attribute without Authorization Token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_Unauthorized_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"[SP-3305] C2038410 Validate Status Code 401 Unauthorizad when updating the value of an existing custom attribute with an empty Authorization Header = ' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_Unauthorized_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038411 Validate Status Code 401 Unauthorizad when updating the value of an existing custom attribute with an invalid Authorization Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038412 Validate Status Code 401 Unauthorizad when updating the value of an existing custom attribute with an invalid Authorization Header = 'SELECT VALUE FROM KEYS'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
											"    pm.expect(jsonData.error_description).to.equal(\"Invalid OAUTH Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SELECT VALUE FROM KEYS",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_InvalidContentType_application/rdf+xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038413 Validate Status Code 415 Unsupported Media Type when updating the value of an existing custom attribute with an invalid Content-Type Header = 'application/rdf+xml'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"     pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_InvalidContentType_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038414 Validate Status Code 415 Unsupported Media Type when updating the value of an existing custom attribute with an empty Content-Type Header = '  '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"     pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_InvalidContentType_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038415 Validate Status Code 415 Unsupported Media Type when updating the value of an existing custom attribute with an invalid Content-Type Header = 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"     pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_UpdateAttributes_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 415 Unsupported Media Type when updating the value of an existing custom attribute with an invalid Content-Type Header = 'SELECT * FROM VALUE'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    let jsonData= pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(jsonData.status).to.equal(415);\r",
											"     pm.expect(jsonData.path).to.equal(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Positive_GetAttributesById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C2038399 Validate Status Code 200 OK When searching for a Custom Attribute by its ID\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_InexistentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 404 Not Found When searching for an inexistent Custom Attribute by its ID\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Key with this ID doesn't exist\");\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.path).to.contain(\"/api/ums/admin/metadata/keys/\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/10101011110101",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"10101011110101"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_LongId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 400 Bad Request When searching for a Custom Attribute with a very long id (>20 characters)\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.status).to.equal(\"Bad Request\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Bad request for the data type required, please verify the request\");\r",
											"    pm.expect(jsonData.status).to.equal(400);\r",
											"    pm.expect(jsonData.path).to.contain(\"/api/ums/admin/metadata/keys/\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/101010111101010110101",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"101010111101010110101"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_IdZero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 404 Bad Request When searching for a Custom Attribute by its ID=0\", function(){\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.status).to.equal(\"Not Found\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Key with this ID doesn't exist\");\r",
											"    pm.expect(jsonData.status).to.equal(404);\r",
											"    pm.expect(jsonData.path).to.contain(\"/api/ums/admin/metadata/keys/\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/0",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 401 Unauthorized When searching for a Custom Attribute by its ID without Authorization token\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_Unauthorized_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 401 Unauthorized When searching for a Custom Attribute by its ID sending an invalid Authorization Header= ' '\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(\"UNAUTHORIZED\");\r",
											"    pm.expect(jsonData.message).to.equal(\"Empty OAUTH Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_Unauthorized_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 401 Unauthorized When searching for a Custom Attribute by its ID sending an invalid Authorization Header= 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_Unauthorized_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 401 Unauthorized When searching for a Custom Attribute by its ID sending an invalid Authorization Header= 'SELECT * FROM DESCRIPTION'\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "SELECT * FROM DESCRIPTION",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_InvalidContentType_xop+xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 415 Unsupported Media Type When searching for a Custom Attribute by its ID sending an invalid Content-Type Header= 'application/xop+xml'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(pm.response.json().path).to.contain(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "SELECT * FROM DESCRIPTION",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/xop+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_InvalidContentType_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 415 Unsupported Media Type When searching for a Custom Attribute by its ID sending an invalid Content-Type Header= ' '\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(pm.response.json().path).to.contain(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "SELECT * FROM DESCRIPTION",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "   ",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_InvalidContentType_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 415 Unsupported Media Type When searching for a Custom Attribute by its ID sending an invalid Content-Type Header= 'abcdef'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(pm.response.json().path).to.contain(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "SELECT * FROM DESCRIPTION",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative_GetAttributesById_InvalidContentType_SQLInjection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate Status Code 415 Unsupported Media Type When searching for a Custom Attribute by its ID sending an invalid Content-Type Header= 'SELECT * FROM ATTRIBUTE'\", function(){\r",
											"    pm.response.to.have.status(415);\r",
											"    pm.expect(pm.response.status).to.equal(\"Unsupported Media Type\");\r",
											"    pm.expect(pm.response.json().path).to.contain(\"/api/ums/admin/metadata/keys\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "{{admin_token_bu1}}",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"type": "any"
										},
										{
											"key": "callBackUrl",
											"type": "any"
										},
										{
											"key": "authUrl",
											"type": "any"
										},
										{
											"key": "accessTokenUrl",
											"type": "any"
										},
										{
											"key": "clientId",
											"type": "any"
										},
										{
											"key": "clientSecret",
											"type": "any"
										},
										{
											"key": "clientAuth",
											"type": "any"
										},
										{
											"key": "grantType",
											"type": "any"
										},
										{
											"key": "scope",
											"type": "any"
										},
										{
											"key": "username",
											"type": "any"
										},
										{
											"key": "password",
											"type": "any"
										},
										{
											"key": "redirectUri",
											"type": "any"
										},
										{
											"key": "refreshToken",
											"type": "any"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "SELECT * FROM DESCRIPTION",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "abcdef",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platform_url}}/api/ums/admin/metadata/keys/{{newAttribute_id}}",
									"host": [
										"{{platform_url}}"
									],
									"path": [
										"api",
										"ums",
										"admin",
										"metadata",
										"keys",
										"{{newAttribute_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.variables.get('admin_token_bu1')) {",
					"    const echoPostRequest = {",
					"      url: pm.environment.get(\"platform_url\") + \"/oauth/token\",",
					"      method: 'POST',",
					"      header: {",
					"            \"Content-Type\": \"application/json\",",
					"            \"Authorization\": \"Basic \" + pm.environment.get(\"postman_app_token\")",
					"        },",
					"      body: {",
					"        mode: 'formdata',",
					"              formdata: [",
					"                {key: \"grant_type\", value: \"password\"},",
					"                {key: \"username\", value: pm.environment.get(\"postman_admin_user\")},",
					"                {key: \"password\", value: pm.environment.get(\"postman_admin_pass\")}",
					"            ]",
					"      }",
					"    };",
					"    console.log(\"running\")",
					"    pm.sendRequest(echoPostRequest, function (err, res) {",
					"        console.log(err ? err : res.json());",
					"        if (err === null) {",
					"            console.log('Setting a new value for admin_token_bu1')",
					"            var responseJson = res.json();",
					"            pm.variables.set('admin_token_bu1', responseJson.access_token)",
					"",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "hierarchy_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "group_id",
			"value": "3",
			"type": "string"
		},
		{
			"key": "new_user",
			"value": ""
		},
		{
			"key": "parent_group_id",
			"value": ""
		},
		{
			"key": "metadata_group_id",
			"value": "27",
			"type": "string"
		},
		{
			"key": "changeGroupName",
			"value": "27",
			"type": "string"
		},
		{
			"key": "new_group_delete",
			"value": ""
		},
		{
			"key": "new_group_delete_id",
			"value": ""
		},
		{
			"key": "new_group_path",
			"value": ""
		},
		{
			"key": "new_group_negativeScenario",
			"value": ""
		},
		{
			"key": "parent_group",
			"value": ""
		},
		{
			"key": "subgroup",
			"value": ""
		},
		{
			"key": "subgroup_id",
			"value": ""
		},
		{
			"key": "testing_group",
			"value": ""
		},
		{
			"key": "testing_group_id",
			"value": ""
		},
		{
			"key": "subgroup_id2",
			"value": ""
		},
		{
			"key": "subgroup2",
			"value": ""
		},
		{
			"key": "subgroup3",
			"value": ""
		},
		{
			"key": "subgroup_id3",
			"value": ""
		},
		{
			"key": "subgroup_id4",
			"value": ""
		},
		{
			"key": "subgroup_path",
			"value": ""
		},
		{
			"key": "subgroup2_path",
			"value": ""
		},
		{
			"key": "subgroup3_path",
			"value": ""
		},
		{
			"key": "manuallyCreated_path",
			"value": ""
		},
		{
			"key": "new_user_id",
			"value": ""
		},
		{
			"key": "new_user_group_id",
			"value": ""
		},
		{
			"key": "new_user_subgroup_id",
			"value": ""
		},
		{
			"key": "new_customAttribute",
			"value": ""
		},
		{
			"key": "metadata_attribute",
			"value": ""
		},
		{
			"key": "new_customAttribute_subgroup",
			"value": ""
		},
		{
			"key": "specialChar_group",
			"value": ""
		},
		{
			"key": "updateDescription",
			"value": ""
		},
		{
			"key": "updateType",
			"value": ""
		},
		{
			"key": "updateDescription_subgroup",
			"value": ""
		},
		{
			"key": "updateType_subgroup",
			"value": ""
		},
		{
			"key": "new_user_subgroup ",
			"value": ""
		},
		{
			"key": "new_user_id_subgroup",
			"value": ""
		},
		{
			"key": "group_rename",
			"value": ""
		},
		{
			"key": "group_rename_id",
			"value": ""
		},
		{
			"key": "parentGroup_rename",
			"value": ""
		},
		{
			"key": "subroup_rename",
			"value": ""
		},
		{
			"key": "subgroup_rename",
			"value": ""
		},
		{
			"key": "user_subgroup ",
			"value": ""
		},
		{
			"key": "user_subgroup",
			"value": ""
		},
		{
			"key": "new_user_group",
			"value": ""
		},
		{
			"key": "new_user_subgroup",
			"value": ""
		},
		{
			"key": "subgroupA",
			"value": ""
		},
		{
			"key": "subgroupA_id",
			"value": ""
		},
		{
			"key": "subgroupA12",
			"value": ""
		},
		{
			"key": "subgroupA12_id",
			"value": ""
		},
		{
			"key": "subgroupA11",
			"value": ""
		},
		{
			"key": "subgroupA1111",
			"value": ""
		},
		{
			"key": "subgroupA11_id",
			"value": ""
		},
		{
			"key": "subgroupA1111_id",
			"value": ""
		},
		{
			"key": "testing_groupB",
			"value": ""
		},
		{
			"key": "subgroupB",
			"value": ""
		},
		{
			"key": "testing_groupB_id",
			"value": ""
		},
		{
			"key": "subgroupB_id",
			"value": ""
		},
		{
			"key": "subgroupLvl2_id",
			"value": ""
		},
		{
			"key": "new_group_delete2",
			"value": ""
		},
		{
			"key": "key",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "key_id",
			"value": ""
		},
		{
			"key": "value",
			"value": ""
		},
		{
			"key": "value_subgroup",
			"value": ""
		},
		{
			"key": "new_name",
			"value": ""
		},
		{
			"key": "new_orgId",
			"value": ""
		},
		{
			"key": "new_sptId",
			"value": ""
		},
		{
			"key": "newAttribute_id",
			"value": ""
		},
		{
			"key": "key_updated",
			"value": ""
		},
		{
			"key": "description_updated",
			"value": ""
		}
	]
}